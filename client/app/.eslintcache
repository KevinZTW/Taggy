[{"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Board.jsx":"1","/Users/kevinzhang/Documents/Taggy/client/app/src/component/AddArticle.jsx":"2","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Card.jsx":"3","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/MobileFolderTab.jsx":"4","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard.jsx":"5","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSChannel.jsx":"6","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSFolder.jsx":"7","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/Folder.jsx":"8","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Landing.jsx":"9","/Users/kevinzhang/Documents/Taggy/client/app/src/lib/lib.js":"10","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Article/Aritcle.jsx":"11","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Graph/GraphBoard.jsx":"12","/Users/kevinzhang/Documents/Taggy/client/app/src/component/App.jsx":"13","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Graph/Graph.jsx":"14","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupFolderSub.jsx":"15","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupFolderTab.jsx":"16","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Today.jsx":"17","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Explore.jsx":"18","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSExplore.jsx":"19","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSPage.jsx":"20","/Users/kevinzhang/Documents/Taggy/client/app/src/firebase.js":"21","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSSearch.jsx":"22","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/FolderTab.jsx":"23","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Today_RSSList.js":"24","/Users/kevinzhang/Documents/Taggy/client/app/src/test/firestore_test_config.js":"25","/Users/kevinzhang/Documents/Taggy/client/app/src/component/CardWrapper.jsx":"26","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/RSS_Reducer.jsx":"27","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/MobileRSSTab.jsx":"28","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/FindRSS.jsx":"29","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Member/Signup.jsx":"30","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/SearchRSS.jsx":"31","/Users/kevinzhang/Documents/Taggy/client/app/src/component/MyRouter.jsx":"32","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupBoard.jsx":"33","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Member/Signin.jsx":"34","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/FunctionTab.jsx":"35","/Users/kevinzhang/Documents/Taggy/client/app/src/reportWebVitals.js":"36","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/member_Reducer.jsx":"37","/Users/kevinzhang/Documents/Taggy/client/app/src/hooks/useD3.js":"38","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSCard.jsx":"39","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSTab.jsx":"40","/Users/kevinzhang/Documents/Taggy/client/app/src/lib/gragh_lib.js":"41","/Users/kevinzhang/Documents/Taggy/client/app/src/index.js":"42","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/actions/index.js":"43","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/Mobile_Burger.jsx":"44","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/article_Reducer.jsx":"45","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/MobileFunctionTab.jsx":"46","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/index.js":"47"},{"size":4187,"mtime":1610116231389,"results":"48","hashOfConfig":"49"},{"size":3868,"mtime":1610008587898,"results":"50","hashOfConfig":"49"},{"size":3019,"mtime":1609419007508,"results":"51","hashOfConfig":"49"},{"size":12607,"mtime":1609430140721,"results":"52","hashOfConfig":"49"},{"size":6027,"mtime":1610271100925,"results":"53","hashOfConfig":"49"},{"size":5165,"mtime":1609419007523,"results":"54","hashOfConfig":"49"},{"size":2023,"mtime":1610271015619,"results":"55","hashOfConfig":"49"},{"size":2188,"mtime":1609419007530,"results":"56","hashOfConfig":"49"},{"size":1336,"mtime":1609993957439,"results":"57","hashOfConfig":"49"},{"size":20028,"mtime":1610271131317,"results":"58","hashOfConfig":"49"},{"size":15439,"mtime":1610257313079,"results":"59","hashOfConfig":"49"},{"size":1586,"mtime":1609999286112,"results":"60","hashOfConfig":"49"},{"size":3913,"mtime":1609419007504,"results":"61","hashOfConfig":"49"},{"size":6064,"mtime":1610271973066,"results":"62","hashOfConfig":"49"},{"size":1836,"mtime":1609419007513,"results":"63","hashOfConfig":"49"},{"size":15594,"mtime":1609318715648,"results":"64","hashOfConfig":"49"},{"size":6087,"mtime":1609990522320,"results":"65","hashOfConfig":"49"},{"size":6627,"mtime":1610010322750,"results":"66","hashOfConfig":"49"},{"size":4059,"mtime":1609419007523,"results":"67","hashOfConfig":"49"},{"size":7706,"mtime":1610270750234,"results":"68","hashOfConfig":"49"},{"size":1393,"mtime":1609419007537,"results":"69","hashOfConfig":"49"},{"size":3267,"mtime":1609419007528,"results":"70","hashOfConfig":"49"},{"size":12471,"mtime":1610008448195,"results":"71","hashOfConfig":"49"},{"size":265,"mtime":1609419007521,"results":"72","hashOfConfig":"49"},{"size":609,"mtime":1609234640291,"results":"73","hashOfConfig":"49"},{"size":1332,"mtime":1609419007509,"results":"74","hashOfConfig":"49"},{"size":689,"mtime":1609419007558,"results":"75","hashOfConfig":"49"},{"size":15337,"mtime":1610000804008,"results":"76","hashOfConfig":"49"},{"size":4318,"mtime":1610256317088,"results":"77","hashOfConfig":"49"},{"size":5387,"mtime":1609946008819,"results":"78","hashOfConfig":"49"},{"size":3401,"mtime":1609419007529,"results":"79","hashOfConfig":"49"},{"size":777,"mtime":1609991140075,"results":"80","hashOfConfig":"49"},{"size":7601,"mtime":1609314991408,"results":"81","hashOfConfig":"49"},{"size":5120,"mtime":1610255171758,"results":"82","hashOfConfig":"49"},{"size":4366,"mtime":1609999363073,"results":"83","hashOfConfig":"49"},{"size":362,"mtime":1606271805707,"results":"84","hashOfConfig":"49"},{"size":383,"mtime":1609419007560,"results":"85","hashOfConfig":"49"},{"size":300,"mtime":1609419007537,"results":"86","hashOfConfig":"49"},{"size":2856,"mtime":1609739202858,"results":"87","hashOfConfig":"49"},{"size":14871,"mtime":1610270975000,"results":"88","hashOfConfig":"49"},{"size":759,"mtime":1609419007556,"results":"89","hashOfConfig":"49"},{"size":827,"mtime":1609419007555,"results":"90","hashOfConfig":"49"},{"size":2174,"mtime":1609419007558,"results":"91","hashOfConfig":"49"},{"size":1177,"mtime":1609305189403,"results":"92","hashOfConfig":"49"},{"size":1190,"mtime":1609419007559,"results":"93","hashOfConfig":"49"},{"size":2571,"mtime":1609949202499,"results":"94","hashOfConfig":"49"},{"size":429,"mtime":1609419007560,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},"qgo3cu",{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"103"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"99"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"158"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"103"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"132"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"122"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"122"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"122"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"158"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Board.jsx",["226","227"],"import { useDispatch, useSelector } from \"react-redux\";\nimport { app } from \"../lib/lib.js\";\nimport { db } from \"../firebase.js\";\nimport React, { useEffect } from \"react\";\nimport CardWrapper from \"./CardWrapper.jsx\";\n\nimport styles from \"./Board.module.css\";\nimport {\n  ADDFETCHARTICLE,\n  SWITCHARTICLEFETCH,\n  RESETARTICLEFETCH,\n} from \"../redux/actions\";\n\nexport default function Board(props) {\n  const dispatch = useDispatch();\n  const user = useSelector((state) => state.memberReducer.user);\n  console.log(user);\n  const fetchRequired = useSelector(\n    (state) => state.articleReducer.fetchRequired\n  );\n  console.log(fetchRequired);\n  const articleList = useSelector((state) => state.articleReducer.articleList);\n  const lastQuery = useSelector((state) => state.articleReducer.lastQuery);\n  useEffect(() => {\n    const handleScroll = () => {\n      app.util.handleScrollBottom(() => {\n        dispatch(SWITCHARTICLEFETCH(true));\n      });\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (lastQuery) {\n  }\n  useEffect(() => {\n    function batchFetchUserArticles(userUid) {\n      if (lastQuery === null) {\n        db.collection(\"Articles\")\n          .orderBy(\"date\", \"desc\")\n          .where(\"uid\", \"==\", userUid)\n          .limit(8)\n          .get()\n          .then((snapshot) => {\n            const tempArticleList = [...articleList];\n            snapshot.forEach((doc) => {\n              tempArticleList.push(doc.data());\n            });\n            const lastQuery = snapshot.docs[snapshot.docs.length - 1];\n            dispatch(ADDFETCHARTICLE(tempArticleList, lastQuery));\n          });\n      } else {\n        if (lastQuery) {\n          db.collection(\"Articles\")\n            .orderBy(\"date\", \"desc\")\n            .where(\"uid\", \"==\", userUid)\n            .startAfter(lastQuery)\n            .limit(8)\n            .get()\n            .then((snapshot) => {\n              const tempArticleList = [...articleList];\n              snapshot.forEach((doc) => {\n                tempArticleList.push(doc.data());\n              });\n              const lastQuery = snapshot.docs[snapshot.docs.length - 1];\n              dispatch(ADDFETCHARTICLE(tempArticleList, lastQuery));\n            });\n        }\n      }\n    }\n\n    if (user && fetchRequired) {\n      console.log(\"fetch start\");\n      batchFetchUserArticles(user.uid);\n    }\n  }, [fetchRequired, user]);\n  let articleSnapshotInit = false;\n  useEffect(() => {\n    console.log(\"her run!\", articleSnapshotInit);\n    let unsubscribe;\n    if (user && !articleSnapshotInit) {\n      unsubscribe = db\n        .collection(\"Articles\")\n        .where(\"uid\", \"==\", user.uid)\n        .onSnapshot(() => {\n          console.log(\"snap shot change\");\n          dispatch(RESETARTICLEFETCH());\n        });\n      articleSnapshotInit = true;\n    } else if (articleSnapshotInit === true) {\n    }\n    return () => {\n      if (typeof unsubscribe === \"function\") {\n        unsubscribe();\n      }\n    };\n  }, [user]);\n  // useEffect(() => {\n  //   function checkArticleUpdate(uid) {\n  //     db.collection(\"Articles\")\n  //       .orderBy(\"date\", \"desc\")\n  //       .where(\"uid\", \"==\", uid)\n  //       .onSnapshot(function (querySnapshot) {\n  //         const list = [];\n\n  //         querySnapshot.forEach(function (doc) {\n  //           list.push({\n  //             title: doc.data().title,\n  //             content: doc.data().markDown.slice(100, 200),\n  //             id: doc.data().id,\n  //             tags: doc.data().tags,\n  //             link: doc.data().link,\n  //             readerHtml: doc.data().readerHtml,\n  //           });\n  //         });\n  //         dispatch(INITARTICLE(list));\n  //       });\n  //   }\n  //   if (user) {\n  //     checkArticleUpdate(user.uid);\n  //   }\n  // }, [user]);\n\n  return (\n    <div className={styles.boardWrapper}>\n      <div className={styles.title}>Saved Article</div>\n      <div className={styles.description}>\n        The article you saved from web and RSS feed, read it anytime you want!\n      </div>\n      <CardWrapper />\n    </div>\n  );\n}\n",["228","229"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/AddArticle.jsx",["230","231"],"import styles from \"./AddArticle.module.css\";\nimport { toast } from \"react-toastify\";\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport importArticleImg from \"../imgs/import_article.png\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nexport default function AddArticle(props) {\n  const location = useLocation();\n  const [loading, setLoading] = useState(false);\n  const [reqUrl, setReqUrl] = useState(\"\");\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  const notify_fail = () =>\n    toast.warn(<div>Sorry....sth goes wrong, please try again later</div>, {\n      position: \"top-right\",\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeOnClick: false,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  function postDataToServer(\n    url,\n    data = {\n      url: \"www.sylish.com\",\n      uid: \"12344\",\n    }\n  ) {\n    setLoading(true);\n    fetch(url, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(function (response) {\n        if (response.status !== 200) {\n          notify_fail();\n          return;\n        } else {\n          response.json().then(function (data) {\n            if (data.msg === \"data sucessfully save in backend\") {\n              setTimeout(props.close, 2500);\n            } else {\n            }\n          });\n        }\n      })\n      .catch(function (err) {\n        notify_fail();\n      });\n  }\n  return (\n    <div\n      className={styles.addArticle}\n      onClick={(e) => {\n        // e.preventDefault();\n      }}\n    >\n      <div className={styles.title}>Import article </div>\n      <div className={styles.description}>\n        Enter the url, we would clip and save the website content\n      </div>\n      <label htmlFor=\"input\" className={styles.addFolderLabel}>\n        Enter URL link\n      </label>\n      <div className={styles.addFormWrapper}>\n        <form className={styles.addForm} action=\"\">\n          <input\n            placeholder=\"https://www.....\"\n            type=\"text\"\n            name=\"input\"\n            className={styles.addInput}\n            value={reqUrl}\n            onChange={(e) => setReqUrl(e.currentTarget.value)}\n          />\n          <button\n            type=\"submit\"\n            className={styles.saveBtn}\n            onClick={(e) => {\n              if (user) {\n                e.preventDefault();\n                postDataToServer(\n                  \"https://www.shopcard.site/route/article/import\",\n                  {\n                    url: reqUrl,\n                    uid: user.uid,\n                  }\n                );\n              }\n            }}\n          >\n            Import\n          </button>\n          <button\n            onClick={() => {\n              props.close();\n            }}\n            className={styles.cancelBtn}\n          >\n            Cancel\n          </button>\n        </form>\n      </div>\n\n      {loading ? <LinearProgress /> : \"\"}\n      <div className={styles.importButtom}>\n        <div className={styles.imgWrapper}>\n          <img src={importArticleImg} alt=\"\" />\n        </div>\n        <div className={styles.extension}>\n          <div className={styles.extensionTitle}>\n            Or save wbe content with Taggy Chrome extension in one click!\n          </div>\n          <a\n            href=\"https://chrome.google.com/webstore/detail/taggy/djgfbkpjhnmnafpmngdfiaoidmfoolcj\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <div className={styles.downloadExtBtn}>\n              Download Chrome Extension\n            </div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n",["232","233"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Card.jsx",["234"],"import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"../css/Card.module.css\";\nimport placeholderImg from \"../imgs/place_holder_img.png\";\nimport DeleteOutlineOutlinedIcon from \"@material-ui/icons/DeleteOutlineOutlined\";\nimport { app } from \"../lib/lib.js\";\nimport { RESETARTICLEFETCH } from \"../redux/actions\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles } from \"@material-ui/core/styles\";\nexport default function Card(props) {\n  const dispatch = useDispatch();\n  var elem = document.createElement(\"div\");\n\n  elem.innerHTML = props.htmlContent;\n  let src;\n\n  if (elem.querySelector(\"img\") && props.link) {\n    if (props.link.includes(\"segmentfault\")) {\n      src = elem.querySelector(\"img\")\n        ? // ? \"https://segmentfault.com\" +\n          elem.querySelector(\"img\").getAttribute(\"data-src\")\n        : null;\n    } else if (\n      props.link.includes(\"codertw\") ||\n      props.link.includes(\"juejin\")\n    ) {\n      src = elem.querySelector(\"img\")\n        ? elem.querySelector(\"img\").getAttribute(\"data-src\")\n        : null;\n    } else {\n      src = elem.querySelector(\"img\") ? elem.querySelector(\"img\").src : null;\n    }\n  }\n  const CustomTooltip = withStyles((theme) => ({\n    tooltip: {\n      color: \"white\",\n      fontFamily: \"Open Sans\",\n      fontSize: 14,\n    },\n  }))(Tooltip);\n  return (\n    <div className={styles.container}>\n      <div className={styles.card}>\n        <Link to={`/article?id=${props.id}`}>\n          <div className={styles.imgWrapper}>\n            {src ? (\n              <div\n                className={styles.color}\n                style={{\n                  backgroundImage: \"url(\" + src + \")\",\n                  backgroundRepeat: \"no-repeat\",\n                  background: \"cover\",\n                  backgroundPosition: \"center\",\n                  backgroundSize: \"cover\",\n                }}\n              ></div>\n            ) : (\n              <img src={placeholderImg} alt=\"\" />\n            )}\n          </div>\n        </Link>\n        <div className={styles.wordWrapper}>\n          <div className={styles.titleWrapper}>\n            <Link to={`/article?id=${props.id}`}>\n              <div className={styles.title}>{props.title}</div>\n            </Link>\n            <div className={styles.actionContainer}>\n              <Tooltip title=\"delete article\" placement=\"right\" arrow>\n                <DeleteOutlineOutlinedIcon\n                  style={{ fontSize: 20, color: \"#5B5B5B\" }}\n                  className={styles.delete}\n                  onClick={() => {\n                    app.article.deleteArticle(props.id, () => {\n                      dispatch(RESETARTICLEFETCH());\n                    });\n                  }}\n                />\n              </Tooltip>\n            </div>\n          </div>\n          <Link to={`/article?id=${props.id}`}>\n            <div className={styles.content}>{props.content}</div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/MobileFolderTab.jsx",["235"],"import Button from \"@material-ui/core/Button\";\nimport CreateNewFolderOutlinedIcon from \"@material-ui/icons/CreateNewFolderOutlined\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\nimport { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styles from \"./FolderTab.module.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TreeView } from \"@material-ui/lab\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useSelector } from \"react-redux\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { Link } from \"react-router-dom\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport { app } from \"../../lib/lib.js\";\nimport AddArticle from \"../AddArticle\";\nimport { useDispatch } from \"react-redux\";\nimport { SWITCHARTICLE, INITARTICLEFOLDERS } from \"../../redux/actions\";\nimport { db } from \"../../firebase.js\";\nimport firebase from \"firebase/app\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport addTagFolderImg from \"../../imgs/add_new_folder.png\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport Folder from \"./Folder\";\n\nconst useStyles = makeStyles({\n  root: {\n    color: \"#B5B5B5\",\n    textAlign: \"left\",\n    padding: \"0px\",\n    flexGrow: 1,\n    maxWidth: 200,\n    marginBottom: \"15px\",\n  },\n});\n\nexport default function FolderTab(props) {\n  const itemstyle = makeStyles({\n    root: {\n      paddingLeft: \"25px\",\n      color: \"#B5B5B5\",\n      maxWidth: 200,\n      marginBottom: \"5px\",\n    },\n  });\n  const classes = useStyles();\n  const itemStyle = itemstyle();\n  const dispatch = useDispatch();\n  const [addArticle, setAddArticle] = useState(false);\n  const [tabChange, setTabChange] = useState(\"\");\n  const [editFolder, setEditFolder] = useState(false);\n  const [addFolderInput, setAddFolderInput] = useState(\"\");\n\n  const articleFolders = useSelector((state) => {\n    //console.log(state);\n    return state.articleReducer.articleFolders;\n  });\n\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  function onDragEnd(result) {\n    const { destination, source } = result;\n    //console.log(result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      //console.log(\"nothing should happended\");\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      //console.log(\"move inside same folder\");\n      const newArticleFolders = [...articleFolders];\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          //console.log(\"hihi\");\n          const newTags = [...folder.tags];\n          const moveItem = { ...newTags[source.index] };\n          //console.log(moveItem);\n          newTags.splice(source.index, 1);\n          newTags.splice(destination.index, 0, moveItem);\n          //console.log(newTags);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      dispatch(INITARTICLEFOLDERS(newArticleFolders));\n\n      //console.log(destination.index, source.index);\n      //console.log(source.droppableId);\n      //console.log(destination.droppableId);\n    }\n    if (destination.droppableId !== source.droppableId) {\n      //console.log(\"move to another folder\");\n      const newArticleFolders = [...articleFolders];\n      let moveItem;\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === source.droppableId) {\n          const newTags = [...folder.tags];\n          moveItem = { ...newTags[source.index] };\n          newTags.splice(source.index, 1);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(source.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          const newTags = [...folder.tags];\n\n          newTags.splice(destination.index, 0, moveItem);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      dispatch(INITARTICLEFOLDERS(newArticleFolders));\n    }\n  }\n\n  useEffect(() => {\n    //console.log(tabChange);\n    function getArticleFolders() {\n      if (user) {\n        app.article\n          .getMemberTagFoldersDetail(user.uid)\n          .then((articleFolders) => {\n            //console.log(articleFolders);\n            dispatch(INITARTICLEFOLDERS(articleFolders));\n\n            return articleFolders;\n          })\n          .then(async (articleFolders) => {\n            const tempFolderList = [];\n            for (let i = 0; i < articleFolders.length; i++) {\n              const tags = await app.getMemberFolderTags(articleFolders[i].id);\n              //console.log(tags);\n              tempFolderList.push({ ...articleFolders[i], tags: tags });\n            }\n            //console.log(tempFolderList);\n            return tempFolderList;\n          })\n          .then((newFolder) => {\n            //console.log(newFolder);\n            dispatch(INITARTICLEFOLDERS(newFolder));\n          });\n      }\n    }\n    getArticleFolders();\n  }, [user, tabChange]);\n\n  function showArticleFolders(folders) {\n    const articleFolderList = [];\n    if (folders.length > 0) {\n      for (const i in folders) {\n        articleFolderList.push(\n          <Droppable droppableId={folders[i].id}>\n            {(provided) => (\n              <TreeItem\n                className={itemStyle.root}\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                key={folders[i].id}\n                nodeId={folders[i].id}\n                label={\n                  <div className={styles.labelWrapper}>\n                    <FolderOpenIcon\n                      style={{ fontSize: 20, color: \"#B5B5B5\" }}\n                    />\n                    <div className={styles.labelTitle}>{folders[i].name}</div>\n                  </div>\n                }\n                onClick={() => {\n                  //console.log(folders[i].id);\n                  // dispatch(SWITCHARTICLE(folders[i].id));\n                }}\n              >\n                <Folder\n                  user={user}\n                  folderTags={folders[i].tags}\n                  key={folders[i].id}\n                />\n                {provided.placeholder}\n              </TreeItem>\n            )}\n          </Droppable>\n        );\n      }\n    }\n    return articleFolderList;\n  }\n  function addArticleFolder(name, uid) {\n    db.collection(\"articleFolders\")\n      .add({\n        name: name,\n        uid: uid,\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            articleFolders: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      })\n      .then(() => {\n        setTabChange(tabChange + 1);\n      });\n  }\n  const articleFolderList = showArticleFolders(articleFolders);\n  // const allTabList = showTabTreeList(tabs);\n\n  return (\n    <div className={styles.mobileFolderTabWrapper}>\n      <div className={styles.mobileFolderTab}>\n        <Link to={\"/board\"}>\n          <div className={styles.sectionTitle}>My Board</div>\n          <div\n            className={styles.importWrapper}\n            onClick={() => {\n              setAddArticle(true);\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<AddOutlinedIcon />}\n            >\n              Import Article\n            </Button>\n          </div>\n          <TreeView\n            className={classes.root}\n            defaultExpanded={[\"\"]}\n            defaultCollapseIcon={<ExpandMoreIcon />}\n            defaultExpandIcon={<ChevronRightIcon />}\n          >\n            <div\n              className={styles.keyTitleWrapper}\n              onClick={() => {\n                //console.log(\"all\");\n                dispatch(SWITCHARTICLE(\"all\"));\n              }}\n            >\n              <DescriptionIcon style={{ fontSize: 20, color: \"#2074ec\" }} />\n              <div className={styles.keyTitle}>All Articles</div>\n            </div>\n\n            <div className={styles.tagWrapper}>\n              <div className={styles.tag}>Tags</div>\n              <CreateNewFolderOutlinedIcon\n                onClick={() => {\n                  setEditFolder(true);\n                }}\n                className={styles.setting}\n                fontSize=\"small\"\n                style={{ color: \"#b2b2b2\" }}\n              />\n            </div>\n            <DragDropContext onDragEnd={onDragEnd}>\n              {articleFolderList}\n            </DragDropContext>\n          </TreeView>\n          {addArticle\n            ? createPortal(\n                <div className={styles.popup}>\n                  <div\n                    className={styles.blur}\n                    onClick={() => {\n                      setAddArticle(false);\n                    }}\n                  ></div>\n                  <AddArticle\n                    user={user}\n                    close={() => {\n                      setAddArticle(false);\n                    }}\n                  />\n                </div>,\n                document.body\n              )\n            : \"\"}\n          {editFolder\n            ? createPortal(\n                <div className={styles.popup}>\n                  <div\n                    className={styles.blur}\n                    onClick={() => {\n                      setEditFolder(false);\n                    }}\n                  ></div>\n                  <div className={styles.addFolder}>\n                    <div className={styles.addTitle}>Add New Folder</div>\n                    <div className={styles.addSubTitle}>\n                      Create folder for the tags you created\n                    </div>\n                    <label htmlFor=\"addForm\" className={styles.addFolderLabel}>\n                      Enter new folder name\n                    </label>\n                    <div className={styles.addFormWrapper}>\n                      <form id=\"addForm\" action=\"\">\n                        <input\n                          className={styles.addInput}\n                          type=\"text\"\n                          value={addFolderInput}\n                          onChange={(e) => {\n                            setAddFolderInput(e.target.value);\n                          }}\n                        />\n                        <button\n                          type=\"submit\"\n                          className={styles.saveBtn}\n                          form=\"addForm\"\n                          onClick={() => {\n                            if (user) {\n                              addArticleFolder(addFolderInput, user.uid);\n                              setEditFolder(false);\n                            } else {\n                              alert(\"Please login to add folder!\");\n                            }\n                          }}\n                        >\n                          Save\n                        </button>\n                        <button\n                          onClick={() => {\n                            setEditFolder(false);\n                          }}\n                          className={styles.cancelBtn}\n                        >\n                          Cancel\n                        </button>\n                      </form>\n                    </div>\n                    <div className={styles.tagsImgWrapper}>\n                      <img src={addTagFolderImg} alt=\"\" />\n                    </div>\n                  </div>\n                </div>,\n                document.body\n              )\n            : \"\"}\n        </Link>\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard.jsx",["236","237","238","239","240","241","242","243"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSChannel.jsx",["244","245"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport { db } from \"../../firebase.js\";\nimport RSSCard from \"./RSSCard\";\n\nimport styles from \"./RSSBoard.module.css\";\nimport { app } from \"../../lib/lib.js\";\nimport RSSPage from \"./RSSPage\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./RSSPage.css\";\nexport default function Board(props) {\n  const [isFollowed, setIsFollowed] = useState(false);\n  const [allFeeds, setAllFeeds] = useState([]);\n\n  const [lastVisible, setLastVisible] = useState(0);\n  const [showPage, setShowPage] = useState(false);\n  const [feedItem, setFeedItem] = useState(\"\");\n  const [lastQueryDoc, setLastQueryDoc] = useState(\"\");\n  const location = useLocation();\n  const search = location.search;\n  const params = new URLSearchParams(search);\n  const channelTitle = params.get(\"title\");\n  const channelDescription = params.get(\"description\");\n\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n\n  function batchFetchAllFeeds(channelRSSId, lastVisible) {\n    //console.log(channelRSSId);\n    if (lastVisible === 0) {\n      //console.log(\"last visible equal zero!\");\n      db.collection(\"RSSItem\")\n        .where(\"RSSId\", \"==\", channelRSSId)\n        .orderBy(\"pubDate\", \"desc\")\n        .limit(15)\n        .get()\n        .then((snapshot) => {\n          //console.log(\"batchfetch start\");\n          const items = [...allFeeds];\n          snapshot.forEach((doc) => {\n            items.push(doc.data());\n          });\n          setLastQueryDoc(snapshot.docs[14]);\n\n          setAllFeeds(items);\n          //console.log(\"se set items as \", items);\n        });\n    } else {\n      if (lastQueryDoc) {\n        //console.log(\"else start, the last visible is\", lastVisible);\n\n        db.collection(\"RSSItem\")\n          .where(\"RSSId\", \"==\", channelRSSId)\n          .orderBy(\"pubDate\", \"desc\")\n          .startAfter(lastQueryDoc)\n          .limit(7)\n          .get()\n          .then((snapshot) => {\n            const items = [...allFeeds];\n            snapshot.forEach((doc) => {\n              items.push(doc.data());\n            });\n\n            setLastQueryDoc(snapshot.docs[snapshot.docs.length - 1]);\n            setAllFeeds(items);\n          });\n      }\n    }\n  }\n\n  function renderAllFeeds(feedItems) {\n    if (feedItems) {\n      const feedList = [];\n      for (const i in feedItems) {\n        feedList.push(\n          <RSSCard\n            item={feedItems[i]}\n            onClick={(e) => {\n              setShowPage(true);\n              setFeedItem(feedItems[i]);\n            }}\n          />\n        );\n      }\n      return (\n        <div className={styles.board}>\n          <Link to=\"/home/channels\" className={styles.arrowBack}>\n            <ArrowBack style={{ color: \"#FFFCEC\" }} />\n          </Link>\n          <h1 className={styles.title}>{channelTitle} </h1>\n          <div className={styles.channelDescription}>{channelDescription}</div>\n          {isFollowed ? (\n            <div className={styles.channelSubscribed}>Following</div>\n          ) : (\n            <div\n              className={styles.channelSubscribe_btn}\n              onClick={() => {\n                //console.log(\"add\", props.channelId);\n                app.addRSSToMember(user.uid, props.channelId, () => {\n                  setIsFollowed(true);\n                });\n              }}\n            >\n              Follow\n            </div>\n          )}\n          {feedList}\n        </div>\n      );\n    }\n  }\n\n  function renderFeedPage(feedItem) {\n    return (\n      <RSSPage\n        item={feedItem}\n        onClick={() => {\n          setShowPage(false);\n        }}\n      />\n    );\n  }\n  const userRSSList = useSelector((state) => {\n    return state.RSSReducer.UserRSSList;\n  });\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const winScroll =\n        document.body.scrollTop || document.documentElement.scrollTop;\n\n      const height =\n        document.documentElement.scrollHeight -\n        document.documentElement.clientHeight;\n      if (winScroll > height - 20) {\n        //console.log(\"reach the bottom!\", lastVisible);\n\n        const newLast = lastVisible + 7;\n        setLastVisible(newLast);\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [lastVisible]);\n\n  useEffect(() => {\n    if (userRSSList) {\n      if (userRSSList.includes(props.channelId)) {\n        setIsFollowed(true);\n      }\n    }\n  }, [userRSSList]);\n  useEffect(() => {\n    batchFetchAllFeeds(props.channelId, lastVisible);\n  }, [props.channelId, lastVisible]);\n\n  const feedPage = renderFeedPage(feedItem);\n  const allFeedsOutome = renderAllFeeds(allFeeds);\n  return (\n    <div>\n      {allFeedsOutome}\n      {showPage ? (\n        <div className={styles.popup}>\n          <div\n            className={styles.blur}\n            onClick={() => {\n              setShowPage(false);\n            }}\n          ></div>\n          {feedPage}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSFolder.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/Folder.jsx",[],["246","247"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Landing.jsx",[],["248","249"],"/Users/kevinzhang/Documents/Taggy/client/app/src/lib/lib.js",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Article/Aritcle.jsx",["250","251","252"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Graph/GraphBoard.jsx",["253"],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { db } from \"../../firebase.js\";\nimport CardWrapper from \"../CardWrapper.jsx\";\nimport styles from \"../Board.module.css\";\nimport { ADDFETCHARTICLE } from \"../../redux/actions\";\n\nexport default function GraphBoard() {\n  const dispatch = useDispatch();\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  useEffect(() => {\n    function checkArticleUpdate(uid) {\n      db.collection(\"Articles\")\n        .orderBy(\"date\", \"desc\")\n        .where(\"uid\", \"==\", uid)\n        .onSnapshot(function (querySnapshot) {\n          const list = [];\n          querySnapshot.forEach(function (doc) {\n            list.push(\n              doc.data()\n              //   {\n              //   title: doc.data().title,\n              //   content: doc.data().markDown.slice(0, 100),\n              //   id: doc.data().id,\n              //   link: doc.data().link,\n              //   tags: doc.data().tags,\n              //   readerHtml: doc.data().readerHtml,\n              // }\n            );\n          });\n          dispatch(ADDFETCHARTICLE(list));\n        });\n    }\n    if (user) {\n      checkArticleUpdate(user.uid);\n    }\n  }, [user]);\n  return (\n    <div className={styles.graphBoardWrapper}>\n      <div className={styles.boardWrapper}>\n        <div className={styles.title}>Graph View</div>\n        <div className={styles.description}>\n          Review your knowledge by clicking the tag dot!{\" \"}\n        </div>\n\n        <CardWrapper />\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/App.jsx",[],["254","255"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Graph/Graph.jsx",["256","257","258"],"import * as d3 from \"d3\";\nimport { useD3 } from \"../../hooks/useD3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { app } from \"../../lib/gragh_lib.js\";\nimport { useDispatch } from \"react-redux\";\nimport { SWITCHARTICLE } from \"../../redux/actions\";\nimport styles from \"./Graph.module.css\";\nexport default function Graph() {\n  const dispatch = useDispatch();\n\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n\n  const [data, setData] = useState({});\n  function color() {\n    const scale = d3.scaleOrdinal(d3.schemeCategory10);\n    return (d) => scale(d.group);\n  }\n  function drag(simulation) {\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    return d3\n      .drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  }\n\n  const ref = useD3(\n    (svg) => {\n      let id;\n      const height = 800;\n      const width = 1000;\n      svg.selectAll(\"*\").remove();\n      if (data.nodes) {\n        const links = data.links.map((d) => Object.create(d));\n        const nodes = data.nodes.map((d) => Object.create(d));\n\n        const simulation = d3\n          .forceSimulation(nodes)\n          .force(\n            \"link\",\n            d3.forceLink(links).id((d) => d.id)\n          )\n          .force(\"charge\", d3.forceManyBody().strength(-500).distanceMax([500]))\n          .force(\"center\", d3.forceCenter(width / 2 - 300, height / 2));\n\n        const link = svg\n          .append(\"g\")\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-opacity\", 0.6)\n          .selectAll(\"line\")\n          .data(links)\n          .join(\"line\")\n          .attr(\"stroke-width\", (d) => Math.sqrt(d.value));\n\n        const node = svg\n          .append(\"g\")\n          .attr(\"stroke-linecap\", \"round\")\n          .attr(\"stroke-linejoin\", \"round\")\n          .selectAll(\"g\")\n          .data(nodes)\n          .join(\"g\")\n          .call(drag(simulation));\n        const circle = node\n          .append(\"circle\")\n          .attr(\"stroke-width\", 1.5)\n          .attr(\"r\", 5)\n          .attr(\"fill\", \"#4F4F4F\");\n        const text = node\n          .append(\"text\")\n          .text((d) => d.id)\n          .clone(true)\n          .lower()\n          .attr(\"stroke-width\", 0.2)\n          .attr(\"stroke\", \"white\")\n          .attr(\"fill\", \"white\")\n          .attr(\"id\", (d) => d.tagId)\n          .on(\"click\", (a) => {\n            d3.select(this).style(\"stroke\", \"yellow\");\n            dispatch(SWITCHARTICLE(a.target.id));\n          });\n\n        node.append(\"title\").text((d) => d.id);\n\n        simulation.on(\"tick\", () => {\n          link\n            .attr(\"x1\", (d) => d.source.x)\n            .attr(\"y1\", (d) => d.source.y)\n            .attr(\"x2\", (d) => d.target.x)\n            .attr(\"y2\", (d) => d.target.y);\n\n          circle.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n          text.attr(\"x\", (d) => d.x + 10).attr(\"y\", (d) => d.y);\n        });\n      }\n\n      return svg.node();\n    },\n    [data]\n  );\n  const articleList = useSelector((state) => {\n    return state.articleReducer.articleList;\n  });\n  function getGraphData(uid) {\n    return new Promise(async (resolve) => {\n      const memberTags = await app.getMemberTags(uid);\n\n      resolve(memberTags);\n    });\n  }\n  function createCombinationList(tags) {\n    const combList = [];\n    for (let i = 0; i < tags.length - 1; i++) {\n      for (let j = i + 1; j < tags.length; j++) {\n        combList.push([tags[i], tags[j]]);\n      }\n    }\n    return combList;\n  }\n  function countCombinationNumber(articleList, combList) {\n    const links = [];\n    for (let i = 0; i < combList.length; i++) {\n      let combNumber = 0;\n      articleList.forEach((article) => {\n        console.log(article);\n        if (article.tags) {\n          console.log(article.tags);\n          console.log(combList[i][1]);\n          if (\n            article.tags.includes(combList[i][0].tagId) &&\n            article.tags.includes(combList[i][1].tagId)\n          ) {\n            combNumber += 1;\n          }\n        }\n      });\n      console.log(combNumber);\n      links.push({\n        source: combList[i][0].label,\n        target: combList[i][1].label,\n        value: combNumber,\n      });\n    }\n    return links;\n  }\n  function combInit(tags) {\n    const combList = createCombinationList(tags);\n    return countCombinationNumber(articleList, combList);\n  }\n\n  function initGraphData(uid) {\n    return new Promise((resolve) => {\n      getGraphData(uid)\n        .then((memberTags) => {\n          const links = combInit(memberTags);\n          const nodes = [];\n          memberTags.forEach((tag) => {\n            nodes.push({\n              id: tag.value,\n              tagId: tag.id,\n            });\n          });\n          return [nodes, links];\n        })\n        .then(([nodes, links]) => {\n          resolve({\n            nodes: nodes,\n            links: links,\n          });\n        });\n    });\n  }\n  useEffect(() => {\n    if (user && articleList[0]) {\n      initGraphData(user.uid).then((data) => {\n        setData(data);\n      });\n    }\n  }, [user, articleList]);\n  return (\n    <div className={styles.graphWrapper}>\n      <div className={styles.graphContainer}>\n        <div className={styles.titleWrapper}></div>\n        <div className={styles.graph}>\n          <svg\n            ref={ref}\n            style={{\n              height: 800,\n              width: \"100%\",\n              marginRight: \"20px\",\n              marginLeft: \"0px\",\n            }}\n          >\n            <g className=\"plot-area\" />\n            <g className=\"x-axis\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupFolderSub.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupFolderTab.jsx",["259"],"import { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styles from \"../SideTab/FolderTab.module.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TreeView } from \"@material-ui/lab\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useSelector } from \"react-redux\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { app } from \"../../lib/lib.js\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  SWITCHARTICLE,\n  GROUPINIT,\n  INITGROUPSELECT,\n  SWITCHGROUPSELECT,\n} from \"../../redux/actions\";\nimport { db } from \"../../firebase.js\";\nimport firebase from \"firebase/app\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nimport GroupFolerSub from \"./GroupFolderSub\";\n\nconst useStyles = makeStyles({\n  root: {\n    color: \"#B5B5B5\",\n\n    flexGrow: 1,\n    maxWidth: 400,\n    marginBottom: \"10px\",\n  },\n});\n\nexport default function GroupFolderTab() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [tabChange, setTabChange] = useState(\"\");\n  const [editFolder, setEditFolder] = useState(false);\n  const [addGroup, setAddGroup] = useState(false);\n  const [addGroupInput, setAddGroupInput] = useState(\"\");\n  const [addFolderInput, setAddFolderInput] = useState(\"\");\n  const [articleFolders, setArticleFolders] = useState([]);\n\n  const groups = useSelector((state) => {\n    return state.groupReducer.groups;\n  });\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  function onDragEnd(result) {\n    const { destination, source } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      //console.log(\"nothing should happended\");\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      //console.log(\"move inside same folder\");\n      const newArticleFolders = [...articleFolders];\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          //console.log(\"hihi\");\n          const newTags = [...folder.tags];\n          const moveItem = { ...newTags[source.index] };\n          //console.log(moveItem);\n          newTags.splice(source.index, 1);\n          newTags.splice(destination.index, 0, moveItem);\n          //console.log(newTags);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      setArticleFolders(newArticleFolders);\n      //console.log(destination.index, source.index);\n      //console.log(source.droppableId);\n      //console.log(destination.droppableId);\n    }\n    if (destination.droppableId !== source.droppableId) {\n      //console.log(\"move to another folder\");\n      const newArticleFolders = [...articleFolders];\n      let moveItem;\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === source.droppableId) {\n          const newTags = [...folder.tags];\n          moveItem = { ...newTags[source.index] };\n          newTags.splice(source.index, 1);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(source.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          const newTags = [...folder.tags];\n\n          newTags.splice(destination.index, 0, moveItem);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      setArticleFolders(newArticleFolders);\n    }\n  }\n\n  useEffect(() => {\n    function getMemberGroups(user) {\n      return db\n        .collection(\"Member\")\n        .doc(user.uid)\n        .get()\n        .then((doc) => {\n          //console.log(doc.data());\n          return doc.data().board;\n        });\n    }\n    function getGroupDbInfo(boardId) {\n      //console.log(boardId);\n      return db\n        .collection(\"GroupBoard\")\n        .doc(boardId)\n        .get()\n        .then((doc) => {\n          return {\n            id: doc.data().id,\n            name: doc.data().name,\n            articleFolders: doc.data().articleFolders,\n          };\n        });\n    }\n    async function memberGroupInit(user) {\n      const groupIds = await getMemberGroups(user);\n\n      const groups = {};\n      //console.log(groupIds);\n      for (const i in groupIds) {\n        const info = await getGroupDbInfo(groupIds[i]);\n        groups[groupIds[i]] = info;\n      }\n      console.warn(groups);\n      if (groups[Object.keys(groups)[0]]) {\n        console.warn(groups[Object.keys(groups)[0]].id);\n        dispatch(\n          INITGROUPSELECT(\n            groups[Object.keys(groups)[0]].id,\n            groups[Object.keys(groups)[0]].name\n          )\n        );\n      }\n\n      //=========!!!!!!!!!!!!!!!!!!!===========\n      // dispatch(GROUPINIT(groups));\n\n      for (const i in groupIds) {\n        const info = await getGroupDbInfo(groupIds[i]);\n        //info ={  id: \"group1\",\n        //name: front end,\n        //articleFolders: [id1, id2, id3],}\n        const folders = await app.getGroupArticleFolders(groupIds[i]);\n        //folders=[{id, name, tags}, {id, name, tags}]\n        //console.log(folders);\n        const folderWithTagInfo = folders.map(async (folder) => {\n          const tags = await app.getMemberFolderTags(folder.id);\n          folder.tags = tags;\n          return folder;\n        });\n\n        const group = await Promise.all(folderWithTagInfo).then((folder) => {\n          info.articleFolders = folder;\n          return info;\n        });\n        //console.log(group);\n        const groupId = groupIds[i];\n        groups[groupId] = group;\n        //console.log(groups);\n      }\n      //console.log(groups);\n\n      dispatch(GROUPINIT(groups));\n    }\n    async function updateMemberGroup(user, changeId) {\n      const groupIds = await getMemberGroups(user);\n      const groups = {};\n      //console.log(groupIds);\n      for (const i in groupIds) {\n        const info = await getGroupDbInfo(groupIds[i]);\n        groups[groupIds[i]] = info;\n      }\n      //console.log(groups);\n      //console.log(changeId);\n      dispatch(SWITCHGROUPSELECT(groups[changeId].id, groups[changeId].name));\n      //=========!!!!!!!!!!!!!!!!!!!===========\n      // dispatch(GROUPINIT(groups));\n\n      for (const i in groupIds) {\n        const info = await getGroupDbInfo(groupIds[i]);\n        //info ={  id: \"group1\",\n        //name: front end,\n        //articleFolders: [id1, id2, id3],}\n        const folders = await app.getGroupArticleFolders(groupIds[i]);\n        //folders=[{id, name, tags}, {id, name, tags}]\n        //console.log(folders);\n        const folderWithTagInfo = folders.map(async (folder) => {\n          const tags = await app.getMemberFolderTags(folder.id);\n          folder.tags = tags;\n          return folder;\n        });\n\n        const group = await Promise.all(folderWithTagInfo).then((folder) => {\n          info.articleFolders = folder;\n          return info;\n        });\n        //console.log(group);\n        const groupId = groupIds[i];\n        groups[groupId] = group;\n        //console.log(groups);\n      }\n      //console.log(groups);\n\n      dispatch(GROUPINIT(groups));\n    }\n    if (tabChange) {\n      updateMemberGroup(user, tabChange).then(() => {});\n    } else if (user) {\n      memberGroupInit(user).then((groups) => {});\n    }\n  }, [user, tabChange]);\n\n  function addArticleFolder(name, uid) {\n    db.collection(\"articleFolders\")\n      .add({\n        name: name,\n        uid: uid,\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            articleFolders: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      });\n  }\n  function addGroupBoard(name, uid) {\n    db.collection(\"GroupBoard\")\n      .add({\n        name: name,\n        member: [uid],\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id, articleFolders: [\"un\" + docRef.id] });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            board: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n        return id;\n      })\n      .then((id) => {\n        db.collection(\"articleFolders\")\n          .doc(\"un\" + id)\n          .set({\n            id: \"un\" + id,\n            name: \"Uncategorized\",\n          });\n        return id;\n      })\n      .then((id) => {\n        setTabChange(id);\n      });\n  }\n  function renderGroupTabs(groups) {\n    const groupTabs = [];\n    //console.log(groups);\n    for (const key in groups) {\n      //console.log(groups[key]);\n      groupTabs.push(\n        <TreeView\n          className={classes.root}\n          defaultExpanded={[\"\"]}\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n          onClick={() => {\n            //console.log(groups[key].name);\n            dispatch(SWITCHGROUPSELECT(key, groups[key].name));\n          }}\n        >\n          <TreeItem\n            nodeId={groups[key].name}\n            label={\n              <div className={styles.labelWrapper}>\n                <PeopleAltIcon />\n                <div className={styles.labelTitle}>{groups[key].name}</div>\n              </div>\n            }\n            onClick={() => {\n              //console.log(\"all\");\n              dispatch(SWITCHARTICLE(\"all\"));\n            }}\n          >\n            <TreeItem\n              nodeId={\"tagAll_\" + groups[key].name}\n              label={\n                <div className={styles.labelWrapper}>\n                  <div className={styles.labelTitle}>All Articles</div>\n                </div>\n              }\n              onClick={() => {\n                //console.log(\"all\");\n                dispatch(SWITCHARTICLE(\"all\"));\n              }}\n            ></TreeItem>\n            {/* <TreeItem\n              nodeId=\"unTag2\"\n              label={\n                <div className={styles.labelWrapper}>\n                  <MarkunreadIcon style={{ fontSize: 20, color: \"#5B5B5B\" }} />\n                  <div className={styles.labelTitle}>Untaged</div>\n                </div>\n              }\n            /> */}\n            <DragDropContext onDragEnd={onDragEnd}>\n              <GroupFolerSub folders={groups[key].articleFolders} />\n            </DragDropContext>\n          </TreeItem>\n        </TreeView>\n      );\n    }\n    return groupTabs;\n  }\n  const groupTabs = renderGroupTabs(groups);\n  // const articleFolderList = showArticleFolders(articleFolders);\n  // const allTabList = showTabTreeList(tabs);\n\n  return (\n    <div className={styles.folderTabWrapper}>\n      <div className={styles.folderTab}>\n        <div className={styles.sectionTitle}>Group Boards</div>\n        <div\n          className={styles.subTitle}\n          onClick={() => {\n            setAddGroup(true);\n          }}\n        >\n          Create New Group\n        </div>\n        {groupTabs}\n\n        {editFolder\n          ? createPortal(\n              <div className={styles.popup}>\n                <div\n                  className={styles.blur}\n                  onClick={() => {\n                    setEditFolder(false);\n                  }}\n                ></div>\n                <div className={styles.addFolder}>\n                  <div className={styles.addTitle}>Add New Folder</div>\n                  <form id=\"addForm\" action=\"\">\n                    <input\n                      className={styles.input}\n                      type=\"text\"\n                      placeholder=\"Folder Name\"\n                      value={addFolderInput}\n                      onChange={(e) => {\n                        setAddFolderInput(e.target.value);\n                      }}\n                    />\n                    <button\n                      type=\"submit\"\n                      className={styles.saveBtn}\n                      form=\"addForm\"\n                      onClick={() => {\n                        if (user) {\n                          addArticleFolder(addFolderInput, user.uid);\n                          setEditFolder(false);\n                        } else {\n                          alert(\"Please login to add folder!\");\n                        }\n                      }}\n                    >\n                      Save\n                    </button>\n                    <button\n                      onClick={() => {\n                        setEditFolder(false);\n                      }}\n                      className={styles.cancelBtn}\n                    >\n                      Cancel\n                    </button>\n                  </form>\n                </div>\n              </div>,\n              document.body\n            )\n          : \"\"}\n        {addGroup\n          ? createPortal(\n              <div className={styles.popup}>\n                <div\n                  className={styles.blur}\n                  onClick={() => {\n                    setAddGroup(false);\n                  }}\n                ></div>\n                <div className={styles.addFolder}>\n                  <div className={styles.addTitle}>Create New Group Board</div>\n                  <form id=\"addForm\" action=\"\">\n                    <input\n                      className={styles.input}\n                      type=\"text\"\n                      placeholder=\"Group Board Name\"\n                      value={addGroupInput}\n                      onChange={(e) => {\n                        setAddGroupInput(e.target.value);\n                      }}\n                    />\n                    <button\n                      type=\"submit\"\n                      className={styles.saveBtn}\n                      form=\"addForm\"\n                      onClick={() => {\n                        if (user) {\n                          addGroupBoard(addGroupInput, user.uid);\n                          setAddGroup(false);\n                        } else {\n                          alert(\"Please login to add group!\");\n                        }\n                      }}\n                    >\n                      Save\n                    </button>\n                    <button\n                      onClick={() => {\n                        setAddGroup(false);\n                      }}\n                      className={styles.cancelBtn}\n                    >\n                      Cancel\n                    </button>\n                  </form>\n                </div>\n              </div>,\n              document.body\n            )\n          : \"\"}\n        <div\n          className={styles.subTitle}\n          onClick={() => {\n            setEditFolder(true);\n          }}\n        >\n          Add Folder\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Today.jsx",["260","261"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Explore.jsx",[],["262","263"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSExplore.jsx",["264","265","266","267"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSPage.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/firebase.js",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSSearch.jsx",["268","269","270","271","272"],"import SearchIcon from \"@material-ui/icons/Search\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SearchRSS from \"./SearchRSS\";\nimport { db } from \"../../firebase.js\";\nimport RSSCard from \"./RSSCard\";\n// import { INITARTICLE } from \"../../redux/actions\";\nimport styles from \"./RSSBoard.module.css\";\n\nimport RSSPage from \"./RSSPage\";\n\nexport default function Board(props) {\n  const [showPage, setShowPage] = useState(false);\n  const [showChannelPage, setShowChannelPage] = useState(false);\n  const [feedItem, setFeedItem] = useState(\"\");\n  const dispatch = useDispatch();\n  //console.log(\"rerender\");\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n\n  function renderFeedPage(feedItem) {\n    //console.log(\"redner run again\");\n    //console.log(feedItem);\n    return (\n      <RSSPage\n        highLight={searchFeed.title}\n        item={feedItem}\n        onClick={() => {\n          setShowPage(false);\n        }}\n      />\n    );\n  }\n\n  const ChannelRSSId = useSelector((state) => {\n    //console.log(\"hihi\");\n    return state.RSSReducer.ChannelRSSId;\n  });\n  //console.log(\"rerender channelid is \", ChannelRSSId);\n\n  const searchFeed = useSelector((state) => {\n    //console.log(state.RSSReducer.feed);\n    return state.RSSReducer.feed;\n  });\n\n  function renderSearchFeed(feed) {\n    const feedList = [];\n    for (const i in feed.items) {\n      feedList.push(\n        <RSSCard\n          highLight={feed.title}\n          item={feed.items[i]}\n          onClick={(e) => {\n            //console.log(\"hihi\");\n            setShowPage(true);\n            setFeedItem(feed.items[i]);\n          }}\n        />\n      );\n    }\n\n    return (\n      <div className={styles.channelPopUpboard}>\n        <div className={styles.titleWrapper}>\n          <SearchIcon\n            fontSize=\"large\"\n            color=\"white\"\n            style={{ color: \"white\" }}\n          />\n          <h1 className={styles.title}>{feed.title}</h1>\n        </div>\n        {/* <div dangerouslySetInnerHTML={{ __html: feed.description }}></div> */}\n\n        {feedList}\n      </div>\n    );\n  }\n\n  const feedPage = renderFeedPage(feedItem);\n  const searchOutcome = renderSearchFeed(searchFeed);\n\n  return (\n    <div className={styles.boardWrapper}>\n      <div className={styles.board}>\n        <h1 className={styles.title}>Search Article</h1>\n\n        <div className={styles.description}>Search quality resources</div>\n        <SearchRSS\n          user={props.user}\n          showChannel={() => {\n            setShowChannelPage(true);\n          }}\n        />\n\n        {showChannelPage ? (\n          <div className={styles.popup}>\n            <div\n              className={styles.blur}\n              onClick={() => {\n                setShowChannelPage(false);\n              }}\n            ></div>\n            {searchOutcome}\n          </div>\n        ) : (\n          \"\"\n        )}\n        {showPage ? (\n          <div className={styles.popup}>\n            <div\n              className={styles.blur}\n              onClick={() => {\n                setShowPage(false);\n              }}\n            ></div>\n            {feedPage}\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/FolderTab.jsx",["273","274","275","276","277","278","279"],"import { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport DescriptionOutlinedIcon from \"@material-ui/icons/DescriptionOutlined\";\nimport { createPortal } from \"react-dom\";\nimport styles from \"./FolderTab.module.css\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { TreeView } from \"@material-ui/lab\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useSelector } from \"react-redux\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { Link } from \"react-router-dom\";\nimport CreateNewFolderOutlinedIcon from \"@material-ui/icons/CreateNewFolderOutlined\";\nimport MarkunreadIcon from \"@material-ui/icons/Markunread\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport BookmarkIcon from \"@material-ui/icons/Bookmark\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport { app } from \"../../lib/lib.js\";\nimport AddArticle from \"../AddArticle\";\nimport { useDispatch } from \"react-redux\";\nimport { SWITCHARTICLE, INITARTICLEFOLDERS } from \"../../redux/actions\";\nimport { db } from \"../../firebase.js\";\nimport firebase from \"firebase/app\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport Folder from \"./Folder\";\nimport addTagFolderImg from \"../../imgs/add_new_folder.png\";\nconst CustomTooltip = withStyles((theme) => ({\n  tooltip: {\n    color: \"white\",\n    fontFamily: \"Open Sans\",\n    fontSize: 14,\n  },\n}))(Tooltip);\nconst useStyles = makeStyles({\n  root: {\n    color: \"#B5B5B5\",\n    textAlign: \"left\",\n    padding: \"0px\",\n    flexGrow: 1,\n    maxWidth: 200,\n    marginBottom: \"15px\",\n  },\n});\nconst itemstyle = makeStyles({\n  root: {\n    paddingLeft: \"25px\",\n    color: \"#B5B5B5\",\n    maxWidth: 200,\n    marginBottom: \"5px\",\n  },\n});\nexport default function FolderTab() {\n  const classes = useStyles();\n  const itemStyle = itemstyle();\n  const dispatch = useDispatch();\n  const [addArticle, setAddArticle] = useState(false);\n  const [tabChange, setTabChange] = useState(\"\");\n  const [editFolder, setEditFolder] = useState(false);\n  const [addFolderInput, setAddFolderInput] = useState(\"\");\n\n  const articleFolders = useSelector((state) => {\n    //console.log(state);\n    return state.articleReducer.articleFolders;\n  });\n\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n\n  function onDragEnd(result) {\n    const { destination, source } = result;\n\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      //console.log(\"move inside same folder\");\n      const newArticleFolders = [...articleFolders];\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          //console.log(\"hihi\");\n          const newTags = [...folder.tags];\n          const moveItem = { ...newTags[source.index] };\n          //console.log(moveItem);\n          newTags.splice(source.index, 1);\n          newTags.splice(destination.index, 0, moveItem);\n          //console.log(newTags);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      dispatch(INITARTICLEFOLDERS(newArticleFolders));\n    }\n    if (destination.droppableId !== source.droppableId) {\n      const newArticleFolders = [...articleFolders];\n      let moveItem;\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === source.droppableId) {\n          const newTags = [...folder.tags];\n          moveItem = { ...newTags[source.index] };\n          newTags.splice(source.index, 1);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          db.collection(\"articleFolders\").doc(source.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          const newTags = [...folder.tags];\n\n          newTags.splice(destination.index, 0, moveItem);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      dispatch(INITARTICLEFOLDERS(newArticleFolders));\n    }\n  }\n\n  useEffect(() => {\n    function getArticleFolders() {\n      console.log(\"getarticle fodler\");\n      if (user) {\n        app.article\n          .getMemberTagFoldersDetail(user.uid)\n          .then((articleFolders) => {\n            dispatch(INITARTICLEFOLDERS(articleFolders));\n\n            return articleFolders;\n          })\n          .then(async (articleFolders) => {\n            const tempFolderList = [];\n            for (let i = 0; i < articleFolders.length; i++) {\n              const tags = await app.getMemberFolderTags(articleFolders[i].id);\n              //console.log(tags);\n              tempFolderList.push({ ...articleFolders[i], tags: tags });\n            }\n            //console.log(tempFolderList);\n            return tempFolderList;\n          })\n          .then((newFolder) => {\n            //console.log(newFolder);\n            dispatch(INITARTICLEFOLDERS(newFolder));\n          });\n      }\n    }\n    getArticleFolders();\n  }, [user, tabChange]);\n\n  function showArticleFolders(folders) {\n    const articleFolderList = [];\n    if (folders.length > 0) {\n      for (const i in folders) {\n        articleFolderList.push(\n          <Droppable droppableId={folders[i].id} key={folders[i].id}>\n            {(provided) => (\n              <TreeItem\n                className={itemStyle.root}\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                key={folders[i].id}\n                nodeId={folders[i].id}\n                label={\n                  <div className={styles.labelWrapper}>\n                    <FolderOpenIcon\n                      style={{ fontSize: 20, color: \"rgba(255,255,255,0.3)\" }}\n                    />\n                    <div className={styles.labelTitle}>{folders[i].name}</div>\n                  </div>\n                }\n              >\n                <Folder\n                  user={user}\n                  folderTags={folders[i].tags}\n                  key={folders[i].id}\n                />\n                {provided.placeholder}\n              </TreeItem>\n            )}\n          </Droppable>\n        );\n      }\n    }\n    return articleFolderList;\n  }\n  function addArticleFolder(name, uid) {\n    db.collection(\"articleFolders\")\n      .add({\n        name: name,\n        uid: uid,\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            articleFolders: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      })\n      .then(() => {\n        setTabChange(tabChange + 1);\n      });\n  }\n  const articleFolderList = showArticleFolders(articleFolders);\n  // const allTabList = showTabTreeList(tabs);\n\n  return (\n    <div className={styles.folderTabWrapper}>\n      <div className={styles.folderTab}>\n        <div className={styles.sectionTitle}>My Board</div>\n\n        <div\n          className={styles.addArticleWrapper}\n          onClick={() => {\n            setAddArticle(true);\n          }}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<AddOutlinedIcon />}\n          >\n            Import Article\n          </Button>\n        </div>\n        <TreeView\n          className={classes.root}\n          defaultExpanded={[\"\"]}\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n        >\n          <div\n            className={styles.keyTitleWrapper}\n            onClick={() => {\n              //console.log(\"all\");\n              dispatch(SWITCHARTICLE(\"all\"));\n            }}\n          >\n            <DescriptionOutlinedIcon\n              style={{ fontSize: 20, color: \"#2074ec\" }}\n            />\n            <div className={styles.keyTitle}>All Articles</div>\n          </div>\n\n          <div className={styles.tagWrapper}>\n            <div className={styles.tag}>Tags</div>\n            <CustomTooltip title=\"add tags folder\" arrow>\n              <CreateNewFolderOutlinedIcon\n                onClick={() => {\n                  setEditFolder(true);\n                }}\n                className={styles.setting}\n                fontSize=\"small\"\n                style={{ color: \"#b2b2b2\" }}\n              />\n            </CustomTooltip>\n          </div>\n          <DragDropContext onDragEnd={onDragEnd}>\n            {articleFolderList}\n          </DragDropContext>\n        </TreeView>\n        {addArticle\n          ? createPortal(\n              <div className={styles.popup}>\n                <div\n                  className={styles.blur}\n                  onClick={() => {\n                    setAddArticle(false);\n                  }}\n                ></div>\n                <AddArticle\n                  user={user}\n                  close={() => {\n                    setAddArticle(false);\n                  }}\n                />\n              </div>,\n              document.body\n            )\n          : \"\"}\n        {editFolder\n          ? createPortal(\n              <div className={styles.popup}>\n                <div\n                  className={styles.blur}\n                  onClick={() => {\n                    setEditFolder(false);\n                  }}\n                ></div>\n                <div className={styles.addFolder}>\n                  <div className={styles.addTitle}>Add new folder</div>\n                  <div className={styles.addSubTitle}>\n                    Create folder to organize tags you created\n                  </div>\n                  <label htmlFor=\"addForm\" className={styles.addFolderLabel}>\n                    Enter new folder name\n                  </label>\n                  <div className={styles.addFormWrapper}>\n                    <form id=\"addForm\" action=\"\">\n                      <input\n                        className={styles.addInput}\n                        type=\"text\"\n                        value={addFolderInput}\n                        onChange={(e) => {\n                          setAddFolderInput(e.target.value);\n                        }}\n                      />\n                      <button\n                        type=\"submit\"\n                        className={styles.saveBtn}\n                        form=\"addForm\"\n                        onClick={() => {\n                          if (user) {\n                            addArticleFolder(addFolderInput, user.uid);\n                            setEditFolder(false);\n                          } else {\n                            alert(\"Please login to add folder!\");\n                          }\n                        }}\n                      >\n                        Save\n                      </button>\n                      <button\n                        onClick={() => {\n                          setEditFolder(false);\n                        }}\n                        className={styles.cancelBtn}\n                      >\n                        Cancel\n                      </button>\n                    </form>\n                  </div>\n                  <div className={styles.tagsImgWrapper}>\n                    <img src={addTagFolderImg} alt=\"\" />\n                  </div>\n                </div>\n              </div>,\n              document.body\n            )\n          : \"\"}\n      </div>\n    </div>\n  );\n}\n",["280","281"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Today_RSSList.js",[],["282","283"],"/Users/kevinzhang/Documents/Taggy/client/app/src/test/firestore_test_config.js",["284"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/CardWrapper.jsx",[],["285","286"],"/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/RSS_Reducer.jsx",["287"],"//reducer\nimport { nanoid } from \"nanoid\";\n\nconst RSS_Reducer = (state = { feed: {}, ChannelRSSId: \"all\" }, action) => {\n  switch (action.type) {\n    case \"GETRSSRESPONSE\":\n      return {\n        ...state,\n        feed: action.feed,\n        url: action.url,\n      };\n\n    case \"SWITCHRSS\":\n      return {\n        ...state,\n        ChannelRSSId: action.ChannelRSSId,\n      };\n    case \"INITUSERRSSLIST\":\n      return {\n        ...state,\n        UserRSSList: action.RSSList,\n      };\n    case \"SETUSERALLFEEDS\":\n      return {\n        ...state,\n        userAllFeeds: [...state.userAllFeeds, action.userAllFeeds],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default RSS_Reducer;\n",["288","289"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/MobileRSSTab.jsx",["290","291","292","293","294","295","296","297","298","299","300"],"import AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styles from \"../SideTab/FolderTab.module.css\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { TreeView } from \"@material-ui/lab\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useSelector } from \"react-redux\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { Link } from \"react-router-dom\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport CreateNewFolderIcon from \"@material-ui/icons/CreateNewFolder\";\nimport CreateNewFolderOutlinedIcon from \"@material-ui/icons/CreateNewFolderOutlined\";\nimport MarkunreadIcon from \"@material-ui/icons/Markunread\";\nimport BookmarkIcon from \"@material-ui/icons/Bookmark\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport { SWITCHRSS } from \"../../redux/actions\";\nimport { app } from \"../../lib/lib.js\";\nimport { useDispatch } from \"react-redux\";\nimport { db } from \"../../firebase.js\";\nimport firebase from \"firebase/app\";\n\nimport ExploreOutlinedIcon from \"@material-ui/icons/ExploreOutlined\";\nimport { INITUSERRSSLIST } from \"../../redux/actions\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nimport RSSFolder from \"./RSSFolder\";\nimport RssFeedIcon from \"@material-ui/icons/RssFeed\";\n\nimport TrendingUpOutlinedIcon from \"@material-ui/icons/TrendingUpOutlined\";\n\nimport addRSSFolderImg from \"../../imgs/add_RSS_folder.png\";\nconst useStyles = makeStyles({\n  root: {\n    color: \"#B5B5B5\",\n    flexGrow: 10,\n    maxWidth: 220,\n    marginBottom: \"10px\",\n    paddingLeft: \"25px\",\n    paddingRight: \"24px\",\n  },\n});\n\nconst CustomTooltip = withStyles((theme) => ({\n  tooltip: {\n    color: \"white\",\n    fontFamily: \"Open Sans\",\n    fontSize: 14,\n  },\n}))(Tooltip);\nexport default function RSSTab(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [addFolderInput, setAddFolderInput] = useState(\"\");\n  const [showPage, setShowPage] = useState(false);\n  const [RSSFolders, setRSSFolders] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const folderstyle = makeStyles({\n    root: {\n      paddingLeft: \"23px\",\n      paddingBottom: \"8px\",\n      maxWidth: 200,\n      fontSize: \"15px important\",\n      marginBottom: \"3px\",\n    },\n  });\n  const folderStyle = folderstyle();\n  function getUserRSSList(uid) {\n    db.collection(\"Member\")\n      .doc(uid)\n      .get()\n      .then((doc) => {\n        if (doc.data().subscribedRSS) {\n          dispatch(INITUSERRSSLIST(doc.data().subscribedRSS));\n        }\n      });\n  }\n  function addNewGroup(uid, name) {\n    db.collection(\"GroupBoard\")\n      .add({\n        name: name,\n        member: [uid],\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            board: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      });\n  }\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  const userRSSList = useSelector((state) => {\n    return state.RSSReducer.UserRSSList;\n  });\n  useEffect(() => {}, [userRSSList]);\n  useEffect(() => {\n    function getRSSFolders() {\n      if (user) {\n        db.collection(\"Member\")\n          .doc(user.uid)\n          .onSnapshot((doc) => {\n            app\n              .getMemberRSSFolders(user.uid)\n              .then((RSSFolders) => {\n                return RSSFolders;\n              })\n              .then(async (RSSFolders) => {\n                for (const folder of RSSFolders) {\n                  if (folder.RSSIds) {\n                    for (const RSSId of folder.RSSIds) {\n                      const RSS = await app.getRSSInfo(RSSId);\n                      folder.RSS.push(RSS);\n                    }\n                  }\n                }\n\n                for (const i in RSSFolders) {\n                  // setExpanded([...expanded, RSSFolders[i].id]);\n                }\n                //console.log(\"set rssfolders\");\n                setRSSFolders(RSSFolders);\n              });\n          });\n      }\n    }\n    if (user) {\n      getUserRSSList(user.uid);\n    }\n    getRSSFolders();\n  }, [user]);\n  function addRSSFolder(name, uid) {\n    db.collection(\"RSSFolders\")\n      .add({\n        name: name,\n        uid: uid,\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            RSSFolders: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      });\n  }\n  function showRSSFolders(folders) {\n    //console.log(\"show rss folders run\", folders);\n    const RSSFolderList = [];\n    if (folders.length > 0) {\n      for (const i in folders) {\n        RSSFolderList.push(\n          <Droppable droppableId={folders[i].id}>\n            {(provided) => (\n              <TreeItem\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                key={folders[i].id}\n                nodeId={folders[i].id}\n                label={\n                  <div className={styles.labelWrapper}>\n                    <FolderOpenIcon\n                      style={{ fontSize: 20, color: \"rgba(225,225,225,0.3)\" }}\n                    />\n                    <div className={styles.labelTitle}>{folders[i].name}</div>\n                  </div>\n                }\n                onClick={() => {}}\n              >\n                <RSSFolder\n                  user={user}\n                  folderId={folders[i].id}\n                  folderRSS={folders[i].RSS}\n                />\n                {provided.placeholder}\n              </TreeItem>\n            )}\n          </Droppable>\n        );\n      }\n    }\n    return RSSFolderList;\n  }\n  //console.log(RSSFolders);\n  const articleFolderList = showRSSFolders(RSSFolders);\n  function onDragEnd(result) {\n    const { destination, source, draggableId } = result;\n    //console.log(result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      //console.log(\"nothing should happended\");\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      //console.log(\"move inside same folder\");\n      const newRSSFolders = [...RSSFolders];\n      let newRSSIds;\n      //console.log(newRSSFolders);\n      newRSSFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          const moveId = folder.RSSIds[source.index];\n          newRSSIds = [...folder.RSSIds];\n          //console.log(moveId);\n          //console.log(newRSSIds);\n          newRSSIds.splice(source.index, 1);\n          //console.log(newRSSIds);\n          newRSSIds.splice(destination.index, 0, moveId);\n          //console.log(newRSSIds);\n\n          const moveItem = folder.RSS[source.index];\n          //console.log(moveItem);\n          folder.RSS.splice(source.index, 1);\n          folder.RSS.splice(destination.index, 0, moveItem);\n          //console.log();\n          folder.RSSIds = newRSSIds;\n        }\n      });\n      //console.log(newRSSFolders);\n\n      db.collection(\"RSSFolders\").doc(destination.droppableId).update({\n        RSS: newRSSIds,\n      });\n      setRSSFolders(newRSSFolders);\n\n      //console.log(destination.index, source.index);\n      //console.log(source.droppableId);\n      //console.log(destination.droppableId);\n    }\n    if (destination.droppableId !== source.droppableId) {\n      //console.log(\"move to another folder\");\n      const newRSSFolders = [...RSSFolders];\n      //console.log(newRSSFolders);\n      let moveId;\n      let moveItem;\n      let newSourceRSSIds;\n      let newDestinationRSSIds;\n      newRSSFolders.forEach((folder) => {\n        if (folder.id === source.droppableId) {\n          //console.log(folder);\n          moveId = folder.RSSIds[source.index];\n          moveItem = folder.RSS[source.index];\n          newSourceRSSIds = [...folder.RSSIds];\n          newSourceRSSIds.splice(source.index, 1);\n          folder.RSS.splice(source.index, 1);\n          folder.RSSIds = newSourceRSSIds;\n          db.collection(\"RSSFolders\").doc(source.droppableId).update({\n            RSS: newSourceRSSIds,\n          });\n        }\n      });\n      newRSSFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          //console.log(folder);\n          newDestinationRSSIds = [...folder.RSSIds];\n          newDestinationRSSIds.splice(destination.index, 0, moveId);\n          folder.RSS.splice(destination.index, 0, moveItem);\n          folder.RSSIds = newDestinationRSSIds;\n          db.collection(\"RSSFolders\").doc(destination.droppableId).update({\n            RSS: newDestinationRSSIds,\n          });\n        }\n      });\n      setRSSFolders(newRSSFolders);\n    }\n  }\n  //console.log(props.focus);\n  //console.log(\"rerender\");\n  return (\n    <div className={styles.mobileFolderTabWrapper}>\n      <div className={styles.mobileFolderTab}>\n        <div className={styles.sectionTitle}>Taggy</div>\n        <Link to={\"/rssexplore\"}>\n          <div className={styles.importWrapper}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<AddOutlinedIcon />}\n            >\n              Add RSS\n            </Button>\n          </div>\n        </Link>\n\n        <Link to={\"/home\"}>\n          <div\n            className={\n              props.focus === \"home\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <TrendingUpOutlinedIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"home\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div className={styles.keyTitle}>Today</div>\n          </div>\n        </Link>\n        <Link to={\"/home/channels\"}>\n          <div\n            className={\n              props.focus === \"channels\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <ExploreOutlinedIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"channels\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div className={styles.keyTitle}>Explore</div>\n          </div>\n        </Link>\n        <Link to={\"/home/myfeeds\"}>\n          <div\n            className={\n              props.focus === \"myfeeds\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <RssFeedIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"myfeeds\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div\n              className={styles.keyTitle}\n              onClick={() => {\n                dispatch(SWITCHRSS(\"all\"));\n              }}\n            >\n              My Feeds\n            </div>\n          </div>\n        </Link>\n        <Link to={\"/home/searchfeeds\"}>\n          <div\n            className={\n              props.focus === \"searchfeeds\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <SearchIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"searchfeeds\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div className={styles.keyTitle} onClick={() => {}}>\n              Search Feeds\n            </div>\n          </div>\n        </Link>\n        <div className={styles.subscriptionWrapper}>\n          <div className={styles.subscription}>Subscription</div>\n          <CustomTooltip title=\"Add new folder\" placement=\"right\" arrow>\n            <CreateNewFolderOutlinedIcon\n              onClick={() => {\n                setShowPage(true);\n              }}\n              className={styles.setting}\n              fontSize=\"small\"\n              style={{ color: \"#b2b2b2\" }}\n            />\n          </CustomTooltip>\n        </div>\n        <TreeView\n          className={classes.root}\n          defaultexpanded={expanded}\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n        >\n          <DragDropContext onDragEnd={onDragEnd}>\n            {articleFolderList}\n          </DragDropContext>\n        </TreeView>\n\n        {showPage\n          ? createPortal(\n              <div className={styles.popup}>\n                <div\n                  className={styles.blur}\n                  onClick={() => {\n                    setShowPage(false);\n                  }}\n                ></div>\n                <div className={styles.addFolder}>\n                  <div className={styles.addTitle}>Add new folder</div>\n                  <div className={styles.addSubTitle}>\n                    Create folder to organize RSS resources you love\n                  </div>\n                  <label className={styles.addFolderLabel} htmlFor=\"addForm\">\n                    Enter new folder name\n                  </label>\n                  <div className={styles.addFormWrapper}>\n                    <form id=\"addForm\" action=\"\">\n                      <input\n                        className={styles.addInput}\n                        type=\"text\"\n                        value={addFolderInput}\n                        onChange={(e) => {\n                          setAddFolderInput(e.target.value);\n                        }}\n                      />\n                      <button\n                        type=\"submit\"\n                        className={styles.saveBtn}\n                        form=\"addForm\"\n                        onClick={() => {\n                          if (user) {\n                            addRSSFolder(addFolderInput, user.uid);\n                            setShowPage(false);\n                          } else {\n                            alert(\"Please login to add folder!\");\n                          }\n                        }}\n                      >\n                        Create\n                      </button>\n                      <button\n                        onClick={() => {\n                          setShowPage(false);\n                        }}\n                        className={styles.cancelBtn}\n                      >\n                        Cancel\n                      </button>\n                    </form>\n                  </div>\n\n                  <div className={styles.imgWrapper}>\n                    <img src={addRSSFolderImg} alt=\"\" />\n                  </div>\n                </div>\n              </div>,\n              document.body\n            )\n          : \"\"}\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/FindRSS.jsx",["301"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styles from \"./FindRSS.module.css\";\nimport * as RSSParser from \"rss-parser\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { GETRSSRESPONSE } from \"../../redux/actions\";\nimport addRSSImg from \"../../imgs/add_RSS_feed.png\";\nexport default function FindRSS(props) {\n  const [reqUrl, setReqUrl] = useState(\"https://medium.com/better-programming\");\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  const notify_fail = () =>\n    toast.warn(<div>Sorry....sth goes wrong, please try again later</div>, {\n      position: \"top-right\",\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeOnClick: false,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  function requestRSS(url) {\n    setLoading(true);\n    if (url.includes(\"medium.com/@\")) {\n      //console.log(\" medium member\");\n      url =\n        \"https://medium.com/feed/@\" + url.replace(\"https://medium.com/@\", \"\");\n    } else if (url.includes(\".medium.com\")) {\n      url =\n        \"https://medium.com/feed/@\" +\n        url.replace(\"https://\", \"\").replace(\".medium.com\", \"\");\n    } else if (url.includes(\"medium.com/\")) {\n      url = \"https://medium.com/feed/\" + url.replace(\"https://medium.com/\", \"\");\n    } else if (url.includes(\"youtube.com/channel\")) {\n      url =\n        \"https://www.youtube.com/feeds/videos.xml?channel_id=\" +\n        url.replace(\"https://www.youtube.com/channel/\", \"\");\n    }\n    const CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n    const parser = new RSSParser({\n      customFields: {\n        item: [[\"media:group\", \"media\", { keepArray: true }]],\n      },\n    });\n    //console.log(\"start to send the requett\");\n    const starttime = Date.now();\n    parser.parseURL(CORS_PROXY + url, function (err, feed) {\n      if (err) {\n        //console.log(\"error, refetch from nbackend\");\n        fetch(\"https://www.shopcard.site/route/rss/fetch\", {\n          method: \"post\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: JSON.stringify({ url: url }),\n        }).then(function (response) {\n          if (response.status !== 200) {\n            //console.log(\"sth goes wrong in backend \");\n            notify_fail();\n          } else {\n            response.json().then((data) => {\n              dispatch(GETRSSRESPONSE(data.rss, url));\n              setLoading(false);\n              props.showChannel();\n            });\n          }\n        });\n      } else {\n        props.showChannel();\n\n        dispatch(GETRSSRESPONSE(feed, url));\n        setLoading(false);\n        feed.items.forEach(function (entry) {});\n      }\n    });\n  }\n\n  return (\n    <div className={styles.addArticle}>\n      <label htmlFor=\"addForm\" className={styles.addFolderLabel}>\n        Enter URL link\n      </label>\n      <div className={styles.addFormWrapper}>\n        <form\n          className={styles.addForm}\n          action=\"\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            if (user) {\n              requestRSS(reqUrl);\n            }\n          }}\n        >\n          <input\n            type=\"text\"\n            name=\"input\"\n            className={styles.addInput}\n            value={reqUrl}\n            placeholder=\"\"\n            onChange={(e) => setReqUrl(e.currentTarget.value)}\n          />\n          <button type=\"submit\" className={styles.saveBtn}>\n            Search\n          </button>\n          <Link to=\"/home\">\n            <button onClick={() => {}} className={styles.cancelBtn}>\n              Cancel\n            </button>\n          </Link>\n        </form>\n      </div>\n      {loading ? <LinearProgress className={styles.progress} /> : \"\"}\n      <div className={styles.tagsImgWrapper}>\n        <img src={addRSSImg} alt=\"\" />\n      </div>\n\n      {/* <div>https://www.youtube.com/channel/UCcabW7890RKJzL968QWEykA</div>\n      <div>https://medium.com/appworks-school</div>\n      <div>https://medium.com/@lindingchi</div> */}\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Member/Signup.jsx",["302","303","304","305"],"import React, { useState } from \"react\";\nimport logo from \"../../imgs/taggy_logo_1x.png\";\nimport \"../../css/App.css\";\nimport styles from \"../../css/SignUp.module.css\";\nimport { Link } from \"react-router-dom\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport { auth } from \"../../firebase.js\";\nimport firebase from \"firebase/app\";\nimport { useHistory } from \"react-router-dom\";\nimport { db } from \"../../firebase\";\nexport default function Signup() {\n  console.log(auth.currentUser);\n  const uiConfig = {\n    callbacks: {\n      signInSuccess: async function (authResult, redirectUrl) {\n        //console.log(authResult);\n        const newUser = await db\n          .collection(\"Member\")\n          .doc(authResult.uid)\n          .get()\n          .then((doc) => {\n            if (doc.data()) {\n              //console.log(\"existing user sign in\");\n              return false;\n            } else {\n              //console.log(\"new user! create it in db\");\n              return true;\n            }\n          });\n        if (newUser) {\n          await db\n            .collection(\"Member\")\n            .doc(authResult.uid)\n            .set({\n              uid: authResult.uid,\n              email: authResult.email,\n              displaynamename: authResult.displayName,\n            })\n            .then(() => {\n              fetch(\"https://www.shopcard.site/route/user/syncuser\");\n            })\n\n            .then(history.push(\"home\"))\n            .catch((error) => {\n              var errorCode = error.code;\n              var errorMessage = error.message;\n              //console.log(errorMessage);\n            });\n        } else {\n          history.push(\"home\");\n        }\n      },\n    },\n    // Popup signin flow rather than redirect flow.\n    signInFlow: \"popup\",\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n  };\n  const history = useHistory();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  function firebaseSignUp(name, email, password) {\n    auth.createUserWithEmailAndPassword(email, password).then((user) => {\n      console.log(\"native signup, create user in firesotre\");\n      db.collection(\"Member\")\n        .doc(user.user.uid)\n        .set({\n          displaynamename: name,\n          email: email,\n          password: password,\n          uid: user.user.uid,\n        })\n        .then(() => {\n          var user = auth.currentUser;\n          console.log(user);\n          user.updateProfile({\n            displayName: name,\n          });\n          fetch(\"https://www.shopcard.site/route/user/syncuser\");\n        })\n        .then(history.push(\"/home\"))\n        .catch((error) => {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          //console.log(errorMessage);\n        });\n    });\n  }\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.headWrapper}>\n        <Link to={\"/\"}>\n          <div className={styles.homeWrapper}>\n            <div className={styles.logoWrapper}>\n              <img src={logo} alt=\"\" />\n            </div>\n            <div className={styles.logoTitle}>Taggy</div>\n          </div>\n        </Link>\n        <Link to={\"/signin\"} className={styles.logInWrapper}>\n          <div className={styles.logInBtn}>Login</div>\n        </Link>\n        <Link to={\"/signup\"}>\n          <div className={styles.SignUpBtn}>Sign up</div>\n        </Link>\n      </div>\n      <div className={styles.blockWrapper}>\n        <div className={styles.block}>\n          <h2 className={styles.title}>Sign Up</h2>\n          <form\n            className={styles.form}\n            onSubmit={(e) => {\n              e.preventDefault();\n              firebaseSignUp(name, email, password);\n            }}\n          >\n            <div className={styles.inputbox}>\n              <label htmlFor=\"username\">User Name</label>\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={name}\n                onChange={(e) => {\n                  setName(e.currentTarget.value);\n                }}\n              />\n            </div>\n            <div className={styles.inputbox}>\n              <label htmlFor=\"email\">Email</label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={(e) => {\n                  setEmail(e.currentTarget.value);\n                }}\n              />\n            </div>\n            <div className={styles.inputbox}>\n              <label htmlFor=\"email\">Password</label>\n              <input\n                type=\"password\"\n                name=\"passowrd\"\n                value={password}\n                onChange={(e) => {\n                  setPassword(e.currentTarget.value);\n                }}\n              />\n            </div>\n            <button>Sign Up</button>\n          </form>\n          <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={auth} />\n          <div className={styles.login}>\n            <span>Already have an account? </span>\n            <Link to={\"/Signin\"}>Login</Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/SearchRSS.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/MyRouter.jsx",["306"],"import React from \"react\";\nimport { useEffect } from \"react\";\nimport { auth } from \"../firebase.js\";\nimport { useDispatch } from \"react-redux\";\nimport { SETMEMBER } from \"../redux/actions\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nexport default function MyRouter() {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const history = useHistory();\n  useEffect(() => {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        console.log(user);\n        dispatch(SETMEMBER(user.uid, user.displayName, user.email));\n      } else {\n        if (location.pathname !== \"/\" && location.pathname !== \"/signin\") {\n          console.log(user);\n          history.push(\"/signup\");\n        }\n      }\n    });\n  }, []);\n\n  return <div></div>;\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupBoard.jsx",["307","308","309","310","311","312","313","314","315"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Member/Signin.jsx",["316","317","318","319","320","321"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/FunctionTab.jsx",["322","323","324","325","326"],"import styles from \"./FunctionTab.module.css\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport logo from \"../../imgs/taggy_logo_3x.png\";\nimport { Link } from \"react-router-dom\";\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\nimport InsertChartIcon from \"@material-ui/icons/InsertChart\";\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\nimport AssessmentOutlinedIcon from \"@material-ui/icons/AssessmentOutlined\";\nimport { auth } from \"../../firebase.js\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\n\nimport HomeOutlinedIcon from \"@material-ui/icons/HomeOutlined\";\n\nimport PeopleAltOutlinedIcon from \"@material-ui/icons/PeopleAltOutlined\";\n\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch } from \"react-redux\";\nimport { SWITCHARTICLE, INITARTICLEFOLDERS } from \"../../redux/actions\";\nexport default function FunctionTab(props) {\n  const dispatch = useDispatch();\n  const CustomTooltip = withStyles((theme) => ({\n    tooltip: {\n      color: \"white\",\n      fontFamily: \"Open Sans\",\n      fontSize: 14,\n    },\n  }))(Tooltip);\n  return (\n    <div className={styles.functionTabWrapper}>\n      <div className={styles.functionTab}>\n        <div className={styles.logoWrapper}>\n          <Link to={\"/home\"}>\n            <CustomTooltip title=\"home\" placement=\"right\" arrow>\n              <img src={logo} alt=\"\" width=\"40px\" />\n            </CustomTooltip>\n          </Link>\n        </div>\n        <div className={styles.iconWrapper}>\n          <Link to={\"/home\"}>\n            <CustomTooltip title=\"home\" placement=\"right\" arrow>\n              <div className={styles.icon}>\n                <HomeOutlinedIcon\n                  className={styles.Icon}\n                  style={\n                    props.focus === \"home\"\n                      ? { color: \"#2074ec\" }\n                      : { color: \"rgba(255,255,255,0.4)\" }\n                  }\n                />\n              </div>\n            </CustomTooltip>\n          </Link>\n          <Link to={\"/board\"}>\n            <CustomTooltip title=\"board\" placement=\"right\" arrow>\n              <div className={styles.icon}>\n                <BookmarkBorderIcon\n                  className={styles.Icon}\n                  onClick={() => {\n                    dispatch(SWITCHARTICLE(\"all\"));\n                  }}\n                  fontSize=\"small\"\n                  style={\n                    props.focus === \"board\"\n                      ? { color: \"#2074ec\" }\n                      : { color: \"rgba(255,255,255,0.4)\" }\n                  }\n                />\n              </div>\n            </CustomTooltip>\n          </Link>\n          <Link to={\"/graph\"}>\n            <CustomTooltip title=\"graph\" placement=\"right\" arrow>\n              <div className={styles.icon}>\n                <AssessmentOutlinedIcon\n                  className={styles.Icon}\n                  fontSize=\"small\"\n                  style={\n                    props.focus === \"graph\"\n                      ? { color: \"#2074ec\" }\n                      : { color: \"rgba(255,255,255,0.4)\" }\n                  }\n                />\n              </div>\n            </CustomTooltip>\n          </Link>\n          {/* <Link to={\"/group\"}>\n            <CustomTooltip title=\"group\" placement=\"right\" arrow>\n              <div className={styles.icon}>\n                <PeopleAltOutlinedIcon\n                  fontSize=\"small\"\n                  className={styles.Icon}\n                  style={\n                    props.focus === \"group\"\n                      ? { color: \"#2074ec\" }\n                      : { color: \"rgba(255,255,255,0.4)\" }\n                  }\n                />\n              </div>\n            </CustomTooltip>\n          </Link> */}\n          <Link to={\"/\"}>\n            <CustomTooltip title=\"log out\" placement=\"right\" arrow>\n              <div className={styles.icon}>\n                <ExitToAppIcon\n                  className={styles.Icon}\n                  calssname={styles.exit}\n                  fontSize=\"small\"\n                  style={{ color: \"#747474\" }}\n                  onClick={() => {\n                    auth\n                      .signOut()\n\n                      .catch((err) => {});\n                  }}\n                />\n              </div>\n            </CustomTooltip>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/reportWebVitals.js",[],["327","328"],"/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/member_Reducer.jsx",["329"],"//reducer\nimport { nanoid } from \"nanoid\";\n\nconst member_Reducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"SETMEMBER\":\n      return {\n        ...state,\n        user: {\n          uid: action.uid,\n          displayName: action.displayName,\n          email: action.email,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default member_Reducer;\n","/Users/kevinzhang/Documents/Taggy/client/app/src/hooks/useD3.js",["330","331"],"import React from \"react\";\nimport * as d3 from \"d3\";\n\nexport const useD3 = (renderChartFn, dependencies) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    //console.log(ref.current);\n    renderChartFn(d3.select(ref.current));\n    return () => {};\n  }, dependencies);\n  return ref;\n};\n",["332","333"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSCard.jsx",["334","335","336","337"],"import React, { useRef, useEffect, useState } from \"react\";\n\nimport { Link } from \"react-router-dom\";\nimport styles from \"./RSSCard.module.css\";\nimport { db } from \"../../firebase.js\";\nimport Highlighter from \"react-highlight-words\";\nimport placeholderImg from \"../../imgs/place_holder_img.png\";\nexport default function RSSCard(props) {\n  const [image, setImage] = useState(false);\n  //console.log(props.item);\n  function deleteRSS(RSSID) {\n    db.collection(\"RSSItem\")\n      .where(\"RSSId\", \"==\", RSSID)\n      .get()\n      .then((snapShot) => {\n        snapShot.forEach((item) => {\n          //console.log(item.data());\n          item.ref.delete();\n        });\n      });\n  }\n  // deleteRSS(\"TgCy1JeefV4chebgB7JD\");\n  var elem = document.createElement(\"div\");\n  elem.innerHTML = props.item.content;\n  let src;\n  if (elem.querySelector(\"img\")) {\n    src = elem.querySelector(\"img\").src;\n  } else if (props.item.media) {\n    src = props.item.media[0][\"media:thumbnail\"][0][\"$\"][\"url\"];\n  }\n  const passDay = (Date.now() - props.item.pubDate) / (1000 * 60 * 60 * 24);\n\n  const showDay =\n    passDay < 1 ? Math.floor(passDay * 24) + \"h\" : Math.floor(passDay) + \"d\";\n  useEffect(() => {\n    //console.log(src);\n    const image = new Image();\n    image.src = src;\n    image.onload = () => {\n      setImage(true);\n    };\n  }, []);\n\n  return (\n    <div className={styles.container} onClick={props.onClick}>\n      <div className={styles.card}>\n        <div className={styles.imgWrapper}>\n          {image ? (\n            <div\n              className={styles.color}\n              style={{\n                backgroundImage: \"url(\" + src + \")\",\n                backgroundRepeat: \"no-repeat\",\n                background: \"cover\",\n                backgroundPosition: \"center\",\n                backgroundSize: \"cover\",\n              }}\n            ></div>\n          ) : (\n            <img src={placeholderImg} alt=\"\" />\n          )}\n        </div>\n\n        <div className={styles.wordWrapper}>\n          <div className={styles.title}>\n            {props.highLight ? (\n              <Highlighter\n                textToHighlight={props.item.title}\n                searchWords={[props.highLight]}\n              />\n            ) : (\n              props.item.title\n            )}\n          </div>\n          <div className={styles.creator}>\n            {props.item.RSS} / {showDay}\n          </div>\n          <div className={styles.content}>\n            {props.highLight ? (\n              <Highlighter\n                textToHighlight={props.item.contentSnippet}\n                searchWords={[props.highLight]}\n              />\n            ) : (\n              props.item.contentSnippet ||\n              props.item[\"content:encodedSnippet\"] ||\n              props.item.media[0][\"media:description\"][0]\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSTab.jsx",["338","339","340","341","342","343"],"import Tooltip from \"@material-ui/core/Tooltip\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styles from \"../SideTab/FolderTab.module.css\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { TreeView } from \"@material-ui/lab\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useSelector } from \"react-redux\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { Link } from \"react-router-dom\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\nimport Button from \"@material-ui/core/Button\";\nimport CreateNewFolderOutlinedIcon from \"@material-ui/icons/CreateNewFolderOutlined\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport { SWITCHRSS } from \"../../redux/actions\";\nimport { app } from \"../../lib/lib.js\";\nimport { useDispatch } from \"react-redux\";\nimport { db } from \"../../firebase.js\";\nimport firebase from \"firebase/app\";\nimport ExploreOutlinedIcon from \"@material-ui/icons/ExploreOutlined\";\nimport { INITUSERRSSLIST } from \"../../redux/actions\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport RSSFolder from \"./RSSFolder\";\nimport RssFeedIcon from \"@material-ui/icons/RssFeed\";\nimport TrendingUpOutlinedIcon from \"@material-ui/icons/TrendingUpOutlined\";\nimport addRSSFolderImg from \"../../imgs/add_RSS_folder.png\";\nconst useStyles = makeStyles({\n  root: {\n    color: \"#B5B5B5\",\n    flexGrow: 10,\n    maxWidth: 220,\n    marginBottom: \"10px\",\n    paddingLeft: \"25px\",\n    paddingRight: \"24px\",\n  },\n});\n\nconst CustomTooltip = withStyles((theme) => ({\n  tooltip: {\n    color: \"white\",\n    fontFamily: \"Open Sans\",\n    fontSize: 14,\n  },\n}))(Tooltip);\nexport default function RSSTab(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [addFolderInput, setAddFolderInput] = useState(\"\");\n  const [showPage, setShowPage] = useState(false);\n  const [RSSFolders, setRSSFolders] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const folderstyle = makeStyles({\n    root: {\n      paddingLeft: \"23px\",\n      paddingBottom: \"8px\",\n      maxWidth: 200,\n      fontSize: \"15px important\",\n      marginBottom: \"3px\",\n    },\n  });\n  const folderStyle = folderstyle();\n  function getUserRSSList(uid) {\n    db.collection(\"Member\")\n      .doc(uid)\n      .get()\n      .then((doc) => {\n        if (doc.data()) {\n          if (doc.data().subscribedRSS) {\n            dispatch(INITUSERRSSLIST(doc.data().subscribedRSS));\n          }\n        }\n      });\n  }\n  function addNewGroup(uid, name) {\n    db.collection(\"GroupBoard\")\n      .add({\n        name: name,\n        member: [uid],\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            board: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      });\n  }\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  const userRSSList = useSelector((state) => {\n    return state.RSSReducer.UserRSSList;\n  });\n  useEffect(() => {}, [userRSSList]);\n  useEffect(() => {\n    function getRSSFolders() {\n      if (user) {\n        db.collection(\"Member\")\n          .doc(user.uid)\n          .onSnapshot((doc) => {\n            app\n              .getMemberRSSFolders(user.uid)\n              .then((RSSFolders) => {\n                return RSSFolders;\n              })\n              .then(async (RSSFolders) => {\n                for (const folder of RSSFolders) {\n                  if (folder.RSSIds) {\n                    for (const RSSId of folder.RSSIds) {\n                      const RSS = await app.getRSSInfo(RSSId);\n\n                      folder.RSS.push(RSS);\n                    }\n                  }\n                }\n                for (const i in RSSFolders) {\n                }\n\n                setRSSFolders(RSSFolders);\n              });\n          });\n      }\n    }\n    if (user) {\n      getUserRSSList(user.uid);\n    }\n    getRSSFolders();\n  }, [user]);\n  function addRSSFolder(name, uid) {\n    db.collection(\"RSSFolders\")\n      .add({\n        name: name,\n        uid: uid,\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            RSSFolders: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      });\n  }\n  function showRSSFolders(folders) {\n    const RSSFolderList = [];\n    if (folders.length > 0) {\n      for (const i in folders) {\n        RSSFolderList.push(\n          <Droppable droppableId={folders[i].id}>\n            {(provided) => (\n              <TreeItem\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                key={folders[i].id}\n                nodeId={folders[i].id}\n                label={\n                  <div className={styles.labelWrapper}>\n                    <FolderOpenIcon\n                      style={{ fontSize: 20, color: \"rgba(225,225,225,0.3)\" }}\n                    />\n                    <div className={styles.labelTitle}>{folders[i].name}</div>\n                  </div>\n                }\n              >\n                <RSSFolder\n                  user={user}\n                  folderId={folders[i].id}\n                  folderRSS={folders[i].RSS}\n                />\n                {provided.placeholder}\n              </TreeItem>\n            )}\n          </Droppable>\n        );\n      }\n    }\n    return RSSFolderList;\n  }\n  //console.log(RSSFolders);\n  const articleFolderList = showRSSFolders(RSSFolders);\n  function onDragEnd(result) {\n    const { destination, source, draggableId } = result;\n    //console.log(result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      //console.log(\"nothing should happended\");\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      //console.log(\"move inside same folder\");\n      const newRSSFolders = [...RSSFolders];\n      let newRSSIds;\n      //console.log(newRSSFolders);\n      newRSSFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          const moveId = folder.RSSIds[source.index];\n          newRSSIds = [...folder.RSSIds];\n          //console.log(moveId);\n          //console.log(newRSSIds);\n          newRSSIds.splice(source.index, 1);\n          //console.log(newRSSIds);\n          newRSSIds.splice(destination.index, 0, moveId);\n          //console.log(newRSSIds);\n\n          const moveItem = folder.RSS[source.index];\n          //console.log(moveItem);\n          folder.RSS.splice(source.index, 1);\n          folder.RSS.splice(destination.index, 0, moveItem);\n          //console.log();\n          folder.RSSIds = newRSSIds;\n        }\n      });\n      //console.log(newRSSFolders);\n\n      db.collection(\"RSSFolders\").doc(destination.droppableId).update({\n        RSS: newRSSIds,\n      });\n      setRSSFolders(newRSSFolders);\n\n      //console.log(destination.index, source.index);\n      //console.log(source.droppableId);\n      //console.log(destination.droppableId);\n    }\n    if (destination.droppableId !== source.droppableId) {\n      //console.log(\"move to another folder\");\n      const newRSSFolders = [...RSSFolders];\n      //console.log(newRSSFolders);\n      let moveId;\n      let moveItem;\n      let newSourceRSSIds;\n      let newDestinationRSSIds;\n      newRSSFolders.forEach((folder) => {\n        if (folder.id === source.droppableId) {\n          //console.log(folder);\n          moveId = folder.RSSIds[source.index];\n          moveItem = folder.RSS[source.index];\n          newSourceRSSIds = [...folder.RSSIds];\n          newSourceRSSIds.splice(source.index, 1);\n          folder.RSS.splice(source.index, 1);\n          folder.RSSIds = newSourceRSSIds;\n          db.collection(\"RSSFolders\").doc(source.droppableId).update({\n            RSS: newSourceRSSIds,\n          });\n        }\n      });\n      newRSSFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          //console.log(folder);\n          newDestinationRSSIds = [...folder.RSSIds];\n          newDestinationRSSIds.splice(destination.index, 0, moveId);\n          folder.RSS.splice(destination.index, 0, moveItem);\n          folder.RSSIds = newDestinationRSSIds;\n          db.collection(\"RSSFolders\").doc(destination.droppableId).update({\n            RSS: newDestinationRSSIds,\n          });\n        }\n      });\n      setRSSFolders(newRSSFolders);\n    }\n  }\n  //console.log(props.focus);\n  //console.log(\"rerender\");\n  return (\n    <div className={styles.folderTabWrapper}>\n      <div className={styles.folderTab}>\n        <div className={styles.sectionTitle}>Taggy</div>\n        <Link to={\"/rssexplore\"}>\n          <div className={styles.importWrapper}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<AddOutlinedIcon />}\n            >\n              Add RSS\n            </Button>\n          </div>\n        </Link>\n\n        <Link to={\"/home\"}>\n          <div\n            className={\n              props.focus === \"home\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <TrendingUpOutlinedIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"home\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div className={styles.keyTitle}>Today</div>\n          </div>\n        </Link>\n        <Link to={\"/home/channels\"}>\n          <div\n            className={\n              props.focus === \"channels\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <ExploreOutlinedIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"channels\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div className={styles.keyTitle}>Explore</div>\n          </div>\n        </Link>\n        <Link to={\"/home/myfeeds\"}>\n          <div\n            className={\n              props.focus === \"myfeeds\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <RssFeedIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"myfeeds\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div\n              className={styles.keyTitle}\n              onClick={() => {\n                dispatch(SWITCHRSS(\"all\"));\n              }}\n            >\n              My Feeds\n            </div>\n          </div>\n        </Link>\n        <Link to={\"/home/searchfeeds\"}>\n          <div\n            className={\n              props.focus === \"searchfeeds\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <SearchIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"searchfeeds\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div className={styles.keyTitle} onClick={() => {}}>\n              Search Feeds\n            </div>\n          </div>\n        </Link>\n        <div className={styles.subscriptionWrapper}>\n          <div className={styles.subscription}>Subscription</div>\n          <CustomTooltip title=\"Add new folder\" placement=\"right\" arrow>\n            <CreateNewFolderOutlinedIcon\n              onClick={() => {\n                setShowPage(true);\n              }}\n              className={styles.setting}\n              fontSize=\"small\"\n              style={{ color: \"#b2b2b2\" }}\n            />\n          </CustomTooltip>\n        </div>\n        <TreeView\n          className={classes.root}\n          defaultexpanded={expanded}\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n        >\n          <DragDropContext onDragEnd={onDragEnd}>\n            {articleFolderList}\n          </DragDropContext>\n        </TreeView>\n\n        {showPage\n          ? createPortal(\n              <div className={styles.popup}>\n                <div\n                  className={styles.blur}\n                  onClick={() => {\n                    setShowPage(false);\n                  }}\n                ></div>\n                <div className={styles.addFolder}>\n                  <div className={styles.addTitle}>Add new folder</div>\n                  <div className={styles.addSubTitle}>\n                    Create folder to organize RSS resources you love\n                  </div>\n                  <label className={styles.addFolderLabel} htmlFor=\"addForm\">\n                    Enter new folder name\n                  </label>\n                  <div className={styles.addFormWrapper}>\n                    <form id=\"addForm\" action=\"\">\n                      <input\n                        className={styles.addInput}\n                        type=\"text\"\n                        value={addFolderInput}\n                        onChange={(e) => {\n                          setAddFolderInput(e.target.value);\n                        }}\n                      />\n                      <button\n                        type=\"submit\"\n                        className={styles.saveBtn}\n                        form=\"addForm\"\n                        onClick={() => {\n                          if (user) {\n                            addRSSFolder(addFolderInput, user.uid);\n                            setShowPage(false);\n                          } else {\n                            alert(\"Please login to add folder!\");\n                          }\n                        }}\n                      >\n                        Create\n                      </button>\n                      <button\n                        onClick={() => {\n                          setShowPage(false);\n                        }}\n                        className={styles.cancelBtn}\n                      >\n                        Cancel\n                      </button>\n                    </form>\n                  </div>\n\n                  <div className={styles.imgWrapper}>\n                    <img src={addRSSFolderImg} alt=\"\" />\n                  </div>\n                </div>\n              </div>,\n              document.body\n            )\n          : \"\"}\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/lib/gragh_lib.js",["344"],"import { resolve } from \"path\";\nimport { app } from \"./lib.js\";\napp.getGraphData = function (uid) {\n  return new Promise(async (resolve) => {\n    const memberTags = await app.getMemberTags(uid);\n    //console.log(\"2\");\n    resolve(memberTags);\n  });\n};\n\napp.initGraphData = function (uid) {\n  return new Promise((resolve) => {\n    app\n      .getGraphData(uid)\n      .then((memberTags) => {\n        //console.log(memberTags);\n        const nodes = [];\n        memberTags.forEach((tag) => {\n          nodes.push({\n            id: tag.value,\n            tagId: tag.id,\n          });\n        });\n        return nodes;\n      })\n      .then((nodes) => {\n        resolve({\n          nodes: nodes,\n          links: [],\n        });\n      });\n  });\n};\n\nexport { app };\n","/Users/kevinzhang/Documents/Taggy/client/app/src/index.js",["345"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./component/App.jsx\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport allReducers from \"./redux/reducers\";\nimport { Provider } from \"react-redux\";\nconst store = createStore(allReducers, composeWithDevTools());\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(//console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/actions/index.js",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/Mobile_Burger.jsx",["346"],"import MobileRSSTab from \"../RSS/MobileRSSTab\";\n\nimport styles from \"./MobileFunctionTab.module.css\";\nimport boardStyles from \"../RSS/RSSBoard.module.css\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport MobileFolderTab from \"./MobileFolderTab\";\nimport { useState } from \"react\";\n\nexport default function MobileBurger(props) {\n  const [showBurger, setShowBurger] = useState(false);\n  let burgerCategory = \"\";\n  switch (props.position) {\n    case \"board\":\n      burgerCategory = <MobileFolderTab />;\n      break;\n    case \"RSS\":\n      burgerCategory = <MobileRSSTab />;\n      break;\n    default:\n  }\n  return (\n    <div className={styles.burgerWrapper}>\n      <MenuIcon\n        fontSize=\"large\"\n        style={{ color: \"white\" }}\n        onClick={() => {\n          setShowBurger(true);\n        }}\n      />\n      {showBurger ? (\n        <div className={boardStyles.popup}>\n          <div\n            className={boardStyles.blur}\n            onClick={() => {\n              setShowBurger(false);\n            }}\n          ></div>\n          {props.position === \"board\" ? <MobileFolderTab /> : <MobileRSSTab />}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n",["347","348"],"/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/article_Reducer.jsx",["349"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/MobileFunctionTab.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/index.js",[],{"ruleId":"350","severity":1,"message":"351","line":79,"column":6,"nodeType":"352","endLine":79,"endColumn":27,"suggestions":"353"},{"ruleId":"350","severity":1,"message":"354","line":92,"column":29,"nodeType":"355","endLine":92,"endColumn":33},{"ruleId":"356","replacedBy":"357"},{"ruleId":"358","replacedBy":"359"},{"ruleId":"360","severity":1,"message":"361","line":7,"column":10,"nodeType":"362","messageId":"363","endLine":7,"endColumn":20},{"ruleId":"360","severity":1,"message":"364","line":9,"column":9,"nodeType":"362","messageId":"363","endLine":9,"endColumn":17},{"ruleId":"356","replacedBy":"365"},{"ruleId":"358","replacedBy":"366"},{"ruleId":"360","severity":1,"message":"367","line":35,"column":9,"nodeType":"362","messageId":"363","endLine":35,"endColumn":22},{"ruleId":"350","severity":1,"message":"368","line":175,"column":6,"nodeType":"352","endLine":175,"endColumn":23,"suggestions":"369"},{"ruleId":"360","severity":1,"message":"370","line":1,"column":38,"nodeType":"362","messageId":"363","endLine":1,"endColumn":44},{"ruleId":"360","severity":1,"message":"371","line":2,"column":10,"nodeType":"362","messageId":"363","endLine":2,"endColumn":21},{"ruleId":"360","severity":1,"message":"372","line":4,"column":10,"nodeType":"362","messageId":"363","endLine":4,"endColumn":12},{"ruleId":"360","severity":1,"message":"373","line":13,"column":10,"nodeType":"362","messageId":"363","endLine":13,"endColumn":21},{"ruleId":"360","severity":1,"message":"374","line":13,"column":23,"nodeType":"362","messageId":"363","endLine":13,"endColumn":37},{"ruleId":"360","severity":1,"message":"375","line":16,"column":10,"nodeType":"362","messageId":"363","endLine":16,"endColumn":23},{"ruleId":"360","severity":1,"message":"376","line":16,"column":25,"nodeType":"362","messageId":"363","endLine":16,"endColumn":41},{"ruleId":"350","severity":1,"message":"377","line":144,"column":6,"nodeType":"352","endLine":144,"endColumn":25,"suggestions":"378"},{"ruleId":"350","severity":1,"message":"379","line":157,"column":6,"nodeType":"352","endLine":157,"endColumn":19,"suggestions":"380"},{"ruleId":"350","severity":1,"message":"381","line":160,"column":6,"nodeType":"352","endLine":160,"endColumn":36,"suggestions":"382"},{"ruleId":"356","replacedBy":"383"},{"ruleId":"358","replacedBy":"384"},{"ruleId":"356","replacedBy":"385"},{"ruleId":"358","replacedBy":"386"},{"ruleId":"350","severity":1,"message":"387","line":120,"column":6,"nodeType":"352","endLine":120,"endColumn":21,"suggestions":"388"},{"ruleId":"350","severity":1,"message":"389","line":157,"column":6,"nodeType":"352","endLine":157,"endColumn":8,"suggestions":"390"},{"ruleId":"350","severity":1,"message":"391","line":374,"column":6,"nodeType":"352","endLine":374,"endColumn":21,"suggestions":"392"},{"ruleId":"350","severity":1,"message":"368","line":39,"column":6,"nodeType":"352","endLine":39,"endColumn":12,"suggestions":"393"},{"ruleId":"356","replacedBy":"394"},{"ruleId":"358","replacedBy":"395"},{"ruleId":"360","severity":1,"message":"396","line":17,"column":12,"nodeType":"362","messageId":"363","endLine":17,"endColumn":17},{"ruleId":"360","severity":1,"message":"397","line":48,"column":11,"nodeType":"362","messageId":"363","endLine":48,"endColumn":13},{"ruleId":"350","severity":1,"message":"398","line":197,"column":6,"nodeType":"352","endLine":197,"endColumn":25,"suggestions":"399"},{"ruleId":"350","severity":1,"message":"368","line":255,"column":6,"nodeType":"352","endLine":255,"endColumn":23,"suggestions":"400"},{"ruleId":"360","severity":1,"message":"401","line":3,"column":10,"nodeType":"362","messageId":"363","endLine":3,"endColumn":21},{"ruleId":"350","severity":1,"message":"402","line":52,"column":6,"nodeType":"352","endLine":52,"endColumn":38,"suggestions":"403"},{"ruleId":"356","replacedBy":"404"},{"ruleId":"358","replacedBy":"405"},{"ruleId":"360","severity":1,"message":"406","line":1,"column":17,"nodeType":"362","messageId":"363","endLine":1,"endColumn":26},{"ruleId":"360","severity":1,"message":"372","line":4,"column":10,"nodeType":"362","messageId":"363","endLine":4,"endColumn":12},{"ruleId":"360","severity":1,"message":"407","line":15,"column":9,"nodeType":"362","messageId":"363","endLine":15,"endColumn":17},{"ruleId":"360","severity":1,"message":"408","line":34,"column":9,"nodeType":"362","messageId":"363","endLine":34,"endColumn":21},{"ruleId":"360","severity":1,"message":"406","line":2,"column":17,"nodeType":"362","messageId":"363","endLine":2,"endColumn":26},{"ruleId":"360","severity":1,"message":"372","line":5,"column":10,"nodeType":"362","messageId":"363","endLine":5,"endColumn":12},{"ruleId":"360","severity":1,"message":"407","line":16,"column":9,"nodeType":"362","messageId":"363","endLine":16,"endColumn":17},{"ruleId":"360","severity":1,"message":"409","line":18,"column":9,"nodeType":"362","messageId":"363","endLine":18,"endColumn":13},{"ruleId":"360","severity":1,"message":"408","line":36,"column":9,"nodeType":"362","messageId":"363","endLine":36,"endColumn":21},{"ruleId":"360","severity":1,"message":"410","line":12,"column":10,"nodeType":"362","messageId":"363","endLine":12,"endColumn":14},{"ruleId":"360","severity":1,"message":"411","line":14,"column":8,"nodeType":"362","messageId":"363","endLine":14,"endColumn":22},{"ruleId":"360","severity":1,"message":"412","line":15,"column":8,"nodeType":"362","messageId":"363","endLine":15,"endColumn":21},{"ruleId":"360","severity":1,"message":"413","line":17,"column":8,"nodeType":"362","messageId":"363","endLine":17,"endColumn":20},{"ruleId":"360","severity":1,"message":"414","line":18,"column":8,"nodeType":"362","messageId":"363","endLine":18,"endColumn":20},{"ruleId":"360","severity":1,"message":"415","line":28,"column":8,"nodeType":"362","messageId":"363","endLine":28,"endColumn":23},{"ruleId":"350","severity":1,"message":"368","line":177,"column":6,"nodeType":"352","endLine":177,"endColumn":23,"suggestions":"416"},{"ruleId":"356","replacedBy":"417"},{"ruleId":"358","replacedBy":"418"},{"ruleId":"356","replacedBy":"419"},{"ruleId":"358","replacedBy":"420"},{"ruleId":"360","severity":1,"message":"421","line":4,"column":5,"nodeType":"362","messageId":"363","endLine":4,"endColumn":8},{"ruleId":"356","replacedBy":"422"},{"ruleId":"358","replacedBy":"423"},{"ruleId":"360","severity":1,"message":"424","line":2,"column":10,"nodeType":"362","messageId":"363","endLine":2,"endColumn":16},{"ruleId":"356","replacedBy":"425"},{"ruleId":"358","replacedBy":"426"},{"ruleId":"360","severity":1,"message":"412","line":1,"column":8,"nodeType":"362","messageId":"363","endLine":1,"endColumn":21},{"ruleId":"360","severity":1,"message":"427","line":16,"column":8,"nodeType":"362","messageId":"363","endLine":16,"endColumn":15},{"ruleId":"360","severity":1,"message":"428","line":17,"column":8,"nodeType":"362","messageId":"363","endLine":17,"endColumn":27},{"ruleId":"360","severity":1,"message":"411","line":19,"column":8,"nodeType":"362","messageId":"363","endLine":19,"endColumn":22},{"ruleId":"360","severity":1,"message":"414","line":20,"column":8,"nodeType":"362","messageId":"363","endLine":20,"endColumn":20},{"ruleId":"360","severity":1,"message":"429","line":62,"column":20,"nodeType":"362","messageId":"363","endLine":62,"endColumn":31},{"ruleId":"360","severity":1,"message":"430","line":72,"column":9,"nodeType":"362","messageId":"363","endLine":72,"endColumn":20},{"ruleId":"360","severity":1,"message":"431","line":83,"column":12,"nodeType":"362","messageId":"363","endLine":83,"endColumn":23},{"ruleId":"360","severity":1,"message":"432","line":129,"column":28,"nodeType":"362","messageId":"363","endLine":129,"endColumn":29},{"ruleId":"350","severity":1,"message":"433","line":142,"column":6,"nodeType":"352","endLine":142,"endColumn":12,"suggestions":"434"},{"ruleId":"360","severity":1,"message":"435","line":201,"column":34,"nodeType":"362","messageId":"363","endLine":201,"endColumn":45},{"ruleId":"360","severity":1,"message":"436","line":52,"column":11,"nodeType":"362","messageId":"363","endLine":52,"endColumn":20},{"ruleId":"360","severity":1,"message":"437","line":45,"column":19,"nodeType":"362","messageId":"363","endLine":45,"endColumn":28},{"ruleId":"360","severity":1,"message":"438","line":46,"column":19,"nodeType":"362","messageId":"363","endLine":46,"endColumn":31},{"ruleId":"360","severity":1,"message":"437","line":86,"column":15,"nodeType":"362","messageId":"363","endLine":86,"endColumn":24},{"ruleId":"360","severity":1,"message":"438","line":87,"column":15,"nodeType":"362","messageId":"363","endLine":87,"endColumn":27},{"ruleId":"350","severity":1,"message":"439","line":23,"column":6,"nodeType":"352","endLine":23,"endColumn":8,"suggestions":"440"},{"ruleId":"360","severity":1,"message":"441","line":5,"column":8,"nodeType":"362","messageId":"363","endLine":5,"endColumn":16},{"ruleId":"360","severity":1,"message":"442","line":10,"column":8,"nodeType":"362","messageId":"363","endLine":10,"endColumn":18},{"ruleId":"360","severity":1,"message":"443","line":12,"column":8,"nodeType":"362","messageId":"363","endLine":12,"endColumn":15},{"ruleId":"360","severity":1,"message":"444","line":14,"column":10,"nodeType":"362","messageId":"363","endLine":14,"endColumn":16},{"ruleId":"360","severity":1,"message":"445","line":21,"column":10,"nodeType":"362","messageId":"363","endLine":21,"endColumn":25},{"ruleId":"360","severity":1,"message":"446","line":21,"column":27,"nodeType":"362","messageId":"363","endLine":21,"endColumn":45},{"ruleId":"360","severity":1,"message":"409","line":25,"column":9,"nodeType":"362","messageId":"363","endLine":25,"endColumn":13},{"ruleId":"350","severity":1,"message":"368","line":74,"column":6,"nodeType":"352","endLine":74,"endColumn":15,"suggestions":"447"},{"ruleId":"360","severity":1,"message":"445","line":81,"column":15,"nodeType":"362","messageId":"363","endLine":81,"endColumn":30},{"ruleId":"360","severity":1,"message":"448","line":2,"column":10,"nodeType":"362","messageId":"363","endLine":2,"endColumn":24},{"ruleId":"360","severity":1,"message":"437","line":56,"column":19,"nodeType":"362","messageId":"363","endLine":56,"endColumn":28},{"ruleId":"360","severity":1,"message":"438","line":57,"column":19,"nodeType":"362","messageId":"363","endLine":57,"endColumn":31},{"ruleId":"360","severity":1,"message":"437","line":85,"column":13,"nodeType":"362","messageId":"363","endLine":85,"endColumn":22},{"ruleId":"360","severity":1,"message":"438","line":86,"column":13,"nodeType":"362","messageId":"363","endLine":86,"endColumn":25},{"ruleId":"449","severity":1,"message":"450","line":111,"column":32,"nodeType":"451","endLine":111,"endColumn":56},{"ruleId":"360","severity":1,"message":"452","line":5,"column":8,"nodeType":"362","messageId":"363","endLine":5,"endColumn":22},{"ruleId":"360","severity":1,"message":"453","line":6,"column":8,"nodeType":"362","messageId":"363","endLine":6,"endColumn":23},{"ruleId":"360","severity":1,"message":"454","line":14,"column":8,"nodeType":"362","messageId":"363","endLine":14,"endColumn":29},{"ruleId":"360","severity":1,"message":"455","line":16,"column":22,"nodeType":"362","messageId":"363","endLine":16,"endColumn":32},{"ruleId":"360","severity":1,"message":"456","line":18,"column":25,"nodeType":"362","messageId":"363","endLine":18,"endColumn":43},{"ruleId":"356","replacedBy":"457"},{"ruleId":"358","replacedBy":"458"},{"ruleId":"360","severity":1,"message":"424","line":2,"column":10,"nodeType":"362","messageId":"363","endLine":2,"endColumn":16},{"ruleId":"350","severity":1,"message":"459","line":11,"column":6,"nodeType":"362","endLine":11,"endColumn":18},{"ruleId":"350","severity":1,"message":"460","line":11,"column":6,"nodeType":"362","endLine":11,"endColumn":18,"suggestions":"461"},{"ruleId":"356","replacedBy":"462"},{"ruleId":"358","replacedBy":"463"},{"ruleId":"360","severity":1,"message":"370","line":1,"column":17,"nodeType":"362","messageId":"363","endLine":1,"endColumn":23},{"ruleId":"360","severity":1,"message":"410","line":3,"column":10,"nodeType":"362","messageId":"363","endLine":3,"endColumn":14},{"ruleId":"360","severity":1,"message":"464","line":11,"column":12,"nodeType":"362","messageId":"363","endLine":11,"endColumn":21},{"ruleId":"350","severity":1,"message":"465","line":42,"column":6,"nodeType":"352","endLine":42,"endColumn":8,"suggestions":"466"},{"ruleId":"360","severity":1,"message":"429","line":53,"column":20,"nodeType":"362","messageId":"363","endLine":53,"endColumn":31},{"ruleId":"360","severity":1,"message":"430","line":63,"column":9,"nodeType":"362","messageId":"363","endLine":63,"endColumn":20},{"ruleId":"360","severity":1,"message":"431","line":76,"column":12,"nodeType":"362","messageId":"363","endLine":76,"endColumn":23},{"ruleId":"360","severity":1,"message":"432","line":122,"column":28,"nodeType":"362","messageId":"363","endLine":122,"endColumn":29},{"ruleId":"350","severity":1,"message":"433","line":134,"column":6,"nodeType":"352","endLine":134,"endColumn":12,"suggestions":"467"},{"ruleId":"360","severity":1,"message":"435","line":191,"column":34,"nodeType":"362","messageId":"363","endLine":191,"endColumn":45},{"ruleId":"360","severity":1,"message":"468","line":1,"column":10,"nodeType":"362","messageId":"363","endLine":1,"endColumn":17},{"ruleId":"360","severity":1,"message":"469","line":6,"column":23,"nodeType":"362","messageId":"363","endLine":6,"endColumn":38},{"ruleId":"360","severity":1,"message":"470","line":17,"column":7,"nodeType":"362","messageId":"363","endLine":17,"endColumn":21},{"ruleId":"356","replacedBy":"471"},{"ruleId":"358","replacedBy":"472"},{"ruleId":"360","severity":1,"message":"424","line":2,"column":10,"nodeType":"362","messageId":"363","endLine":2,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'articleList', 'dispatch', and 'lastQuery'. Either include them or remove the dependency array.","ArrayExpression",["473"],"Assignments to the 'articleSnapshotInit' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-native-reassign",["474"],"no-negated-in-lhs",["475"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'location' is assigned a value but never used.",["474"],["475"],"'CustomTooltip' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["476"],"'useRef' is defined but never used.","'useDispatch' is defined but never used.","'db' is defined but never used.","'lastVisible' is assigned a value but never used.","'setLastVisible' is assigned a value but never used.","'lastQueryDoc0' is assigned a value but never used.","'setLastQueryDoc0' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUserFeeds'. Either include it or remove the dependency array.",["477"],"React Hook useEffect has a missing dependency: 'props.channelId'. Either include it or remove the dependency array.",["478"],"React Hook useEffect has a missing dependency: 'batchFetchAllFeeds'. Either include it or remove the dependency array.",["479"],["474"],["475"],["474"],["475"],"React Hook useEffect has missing dependencies: 'article.highLight' and 'initAricleHighLight'. Either include them or remove the dependency array.",["480"],"React Hook useEffect has missing dependencies: 'id' and 'note'. Either include them or remove the dependency array.",["481"],"React Hook useEffect has a missing dependency: 'handleMouseUp'. Either include it or remove the dependency array.",["482"],["483"],["474"],["475"],"'color' is defined but never used.","'id' is defined but never used.","React Hook useEffect has a missing dependency: 'initGraphData'. Either include it or remove the dependency array.",["484"],["485"],"'useSelector' is defined but never used.","React Hook useEffect has missing dependencies: 'BackEndRSSList', 'FrontEndRSSList', 'PMRSSList', 'TechRSSList', 'UIUXRSSList', and 'batchFetchAllFeeds'. Either include them or remove the dependency array.",["486"],["474"],["475"],"'useEffect' is defined but never used.","'dispatch' is assigned a value but never used.","'ChannelRSSId' is assigned a value but never used.","'user' is assigned a value but never used.","'Link' is defined but never used.","'MarkunreadIcon' is defined but never used.","'AddCircleIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'BookmarkIcon' is defined but never used.","'DescriptionIcon' is defined but never used.",["487"],["474"],["475"],["474"],["475"],"'app' is assigned a value but never used.",["474"],["475"],"'nanoid' is defined but never used.",["474"],["475"],"'AddIcon' is defined but never used.","'CreateNewFolderIcon' is defined but never used.","'setExpanded' is assigned a value but never used.","'folderStyle' is assigned a value but never used.","'addNewGroup' is defined but never used.","'i' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserRSSList'. Either include it or remove the dependency array.",["488"],"'draggableId' is assigned a value but never used.","'starttime' is assigned a value but never used.","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'location.pathname'. Either include them or remove the dependency array.",["489"],"'dispatch' is defined but never used.","'AddArticle' is defined but never used.","'teamImg' is defined but never used.","'render' is defined but never used.","'memberEmailList' is assigned a value but never used.","'setMemberEmailList' is assigned a value but never used.",["490"],"'ToastContainer' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'AccountBoxIcon' is defined but never used.","'InsertChartIcon' is defined but never used.","'PeopleAltOutlinedIcon' is defined but never used.","'makeStyles' is defined but never used.","'INITARTICLEFOLDERS' is defined but never used.",["474"],["475"],"React Hook React.useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook React.useEffect has a missing dependency: 'renderChartFn'. Either include it or remove the dependency array. If 'renderChartFn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["491"],["474"],["475"],"'deleteRSS' is defined but never used.","React Hook useEffect has a missing dependency: 'src'. Either include it or remove the dependency array.",["492"],["493"],"'resolve' is defined but never used.","'applyMiddleware' is defined but never used.","'burgerCategory' is assigned a value but never used.",["474"],["475"],{"desc":"494","fix":"495"},"no-global-assign","no-unsafe-negation",{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"496","fix":"514"},{"desc":"515","fix":"516"},{"desc":"496","fix":"517"},{"desc":"518","fix":"519"},{"desc":"520","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"518","fix":"528"},"Update the dependencies array to be: [articleList, dispatch, fetchRequired, lastQuery, user]",{"range":"529","text":"530"},"Update the dependencies array to be: [user, tabChange, dispatch]",{"range":"531","text":"532"},"Update the dependencies array to be: [user, queryPaging, fetchUserFeeds]",{"range":"533","text":"534"},"Update the dependencies array to be: [props.channelId, userRSSList]",{"range":"535","text":"536"},"Update the dependencies array to be: [props.channelId, lastVisible, batchFetchAllFeeds]",{"range":"537","text":"538"},"Update the dependencies array to be: [article.highLight, articleLoaded, initAricleHighLight]",{"range":"539","text":"540"},"Update the dependencies array to be: [id, note]",{"range":"541","text":"542"},"Update the dependencies array to be: [handleMouseUp, renderArticle]",{"range":"543","text":"544"},"Update the dependencies array to be: [dispatch, user]",{"range":"545","text":"546"},"Update the dependencies array to be: [user, articleList, initGraphData]",{"range":"547","text":"548"},{"range":"549","text":"532"},"Update the dependencies array to be: [selectCategory, feedFetchTimes, batchFetchAllFeeds, FrontEndRSSList, BackEndRSSList, PMRSSList, UIUXRSSList, TechRSSList]",{"range":"550","text":"551"},{"range":"552","text":"532"},"Update the dependencies array to be: [getUserRSSList, user]",{"range":"553","text":"554"},"Update the dependencies array to be: [dispatch, history, location.pathname]",{"range":"555","text":"556"},"Update the dependencies array to be: [dispatch, groupId]",{"range":"557","text":"558"},"Update the dependencies array to be: [renderChartFn]",{"range":"559","text":"560"},"Update the dependencies array to be: [src]",{"range":"561","text":"562"},{"range":"563","text":"554"},[2499,2520],"[articleList, dispatch, fetchRequired, lastQuery, user]",[5962,5979],"[user, tabChange, dispatch]",[4224,4243],"[user, queryPaging, fetchUserFeeds]",[4604,4617],"[props.channelId, userRSSList]",[4699,4729],"[props.channelId, lastVisible, batchFetchAllFeeds]",[3834,3849],"[article.highLight, articleLoaded, initAricleHighLight]",[4804,4806],"[id, note]",[11620,11635],"[handleMouseUp, renderArticle]",[1242,1248],"[dispatch, user]",[5466,5485],"[user, articleList, initGraphData]",[8242,8259],[1796,1828],"[selectCategory, feedFetchTimes, batchFetchAllFeeds, FrontEndRSSList, BackEndRSSList, PMRSSList, UIUXRSSList, TechRSSList]",[6114,6131],[4568,4574],"[getUserRSSList, user]",[747,749],"[dispatch, history, location.pathname]",[2425,2434],"[dispatch, groupId]",[268,280],"[renderChartFn]",[1319,1321],"[src]",[4201,4207]]