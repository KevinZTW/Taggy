[{"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Board.jsx":"1","/Users/kevinzhang/Documents/Taggy/client/app/src/component/AddArticle.jsx":"2","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Card.jsx":"3","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/MobileFolderTab.jsx":"4","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard.jsx":"5","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSChannel.jsx":"6","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSFolder.jsx":"7","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/Folder.jsx":"8","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Landing.jsx":"9","/Users/kevinzhang/Documents/Taggy/client/app/src/lib/lib.js":"10","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Article/Aritcle.jsx":"11","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Graph/GraphBoard.jsx":"12","/Users/kevinzhang/Documents/Taggy/client/app/src/component/App.jsx":"13","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Graph/Graph.jsx":"14","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupFolderSub.jsx":"15","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupFolderTab.jsx":"16","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Today.jsx":"17","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Explore.jsx":"18","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSExplore.jsx":"19","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSPage.jsx":"20","/Users/kevinzhang/Documents/Taggy/client/app/src/firebase.js":"21","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSSearch.jsx":"22","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/FolderTab.jsx":"23","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Today_RSSList.js":"24","/Users/kevinzhang/Documents/Taggy/client/app/src/test/firestore_test_config.js":"25","/Users/kevinzhang/Documents/Taggy/client/app/src/component/CardWrapper.jsx":"26","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/RSS_Reducer.jsx":"27","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/MobileRSSTab.jsx":"28","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/FindRSS.jsx":"29","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Member/Signup.jsx":"30","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/SearchRSS.jsx":"31","/Users/kevinzhang/Documents/Taggy/client/app/src/component/MyRouter.jsx":"32","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupBoard.jsx":"33","/Users/kevinzhang/Documents/Taggy/client/app/src/component/Member/Signin.jsx":"34","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/FunctionTab.jsx":"35","/Users/kevinzhang/Documents/Taggy/client/app/src/reportWebVitals.js":"36","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/member_Reducer.jsx":"37","/Users/kevinzhang/Documents/Taggy/client/app/src/hooks/useD3.js":"38","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSCard.jsx":"39","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSTab.jsx":"40","/Users/kevinzhang/Documents/Taggy/client/app/src/lib/gragh_lib.js":"41","/Users/kevinzhang/Documents/Taggy/client/app/src/index.js":"42","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/actions/index.js":"43","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/Mobile_Burger.jsx":"44","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/article_Reducer.jsx":"45","/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/MobileFunctionTab.jsx":"46","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/index.js":"47"},{"size":4178,"mtime":1609773174902,"results":"48","hashOfConfig":"49"},{"size":2527,"mtime":1609318636425,"results":"50","hashOfConfig":"49"},{"size":3019,"mtime":1609419007508,"results":"51","hashOfConfig":"49"},{"size":12607,"mtime":1609430140721,"results":"52","hashOfConfig":"49"},{"size":6114,"mtime":1609771674601,"results":"53","hashOfConfig":"49"},{"size":5165,"mtime":1609419007523,"results":"54","hashOfConfig":"49"},{"size":2135,"mtime":1609419007524,"results":"55","hashOfConfig":"49"},{"size":2188,"mtime":1609419007530,"results":"56","hashOfConfig":"49"},{"size":1309,"mtime":1609419007516,"results":"57","hashOfConfig":"49"},{"size":20073,"mtime":1609947620843,"results":"58","hashOfConfig":"49"},{"size":15420,"mtime":1609816015293,"results":"59","hashOfConfig":"49"},{"size":1487,"mtime":1609322632929,"results":"60","hashOfConfig":"49"},{"size":3913,"mtime":1609419007504,"results":"61","hashOfConfig":"49"},{"size":6305,"mtime":1609318701970,"results":"62","hashOfConfig":"49"},{"size":1836,"mtime":1609419007513,"results":"63","hashOfConfig":"49"},{"size":15594,"mtime":1609318715648,"results":"64","hashOfConfig":"49"},{"size":6077,"mtime":1609946867635,"results":"65","hashOfConfig":"49"},{"size":6778,"mtime":1609252579518,"results":"66","hashOfConfig":"49"},{"size":4059,"mtime":1609322632940,"results":"67","hashOfConfig":"49"},{"size":7520,"mtime":1609771816324,"results":"68","hashOfConfig":"49"},{"size":1393,"mtime":1609419007537,"results":"69","hashOfConfig":"49"},{"size":3267,"mtime":1609419007528,"results":"70","hashOfConfig":"49"},{"size":12774,"mtime":1609322632947,"results":"71","hashOfConfig":"49"},{"size":265,"mtime":1609227015549,"results":"72","hashOfConfig":"49"},{"size":609,"mtime":1609234640291,"results":"73","hashOfConfig":"49"},{"size":1332,"mtime":1609419007509,"results":"74","hashOfConfig":"49"},{"size":689,"mtime":1609419007558,"results":"75","hashOfConfig":"49"},{"size":15570,"mtime":1609947808438,"results":"76","hashOfConfig":"49"},{"size":4365,"mtime":1609665149576,"results":"77","hashOfConfig":"49"},{"size":5387,"mtime":1609946008819,"results":"78","hashOfConfig":"49"},{"size":3401,"mtime":1609419007529,"results":"79","hashOfConfig":"49"},{"size":763,"mtime":1609766427123,"results":"80","hashOfConfig":"49"},{"size":7601,"mtime":1609314991408,"results":"81","hashOfConfig":"49"},{"size":5005,"mtime":1609946060941,"results":"82","hashOfConfig":"49"},{"size":4507,"mtime":1609318430992,"results":"83","hashOfConfig":"49"},{"size":362,"mtime":1606271805707,"results":"84","hashOfConfig":"49"},{"size":383,"mtime":1609044399136,"results":"85","hashOfConfig":"49"},{"size":300,"mtime":1609419007537,"results":"86","hashOfConfig":"49"},{"size":2856,"mtime":1609739202858,"results":"87","hashOfConfig":"49"},{"size":15718,"mtime":1609949192181,"results":"88","hashOfConfig":"49"},{"size":759,"mtime":1609419007556,"results":"89","hashOfConfig":"49"},{"size":827,"mtime":1609419007555,"results":"90","hashOfConfig":"49"},{"size":2174,"mtime":1609419007558,"results":"91","hashOfConfig":"49"},{"size":1177,"mtime":1609305189403,"results":"92","hashOfConfig":"49"},{"size":1190,"mtime":1609419007559,"results":"93","hashOfConfig":"49"},{"size":2571,"mtime":1609949202499,"results":"94","hashOfConfig":"49"},{"size":429,"mtime":1609044399135,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},"qgo3cu",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"99"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Board.jsx",["206","207"],"import { useDispatch, useSelector } from \"react-redux\";\nimport { app } from \"../lib/lib.js\";\nimport { db } from \"../firebase.js\";\nimport React, { useEffect } from \"react\";\nimport CardWrapper from \"./CardWrapper.jsx\";\n\nimport styles from \"./Board.module.css\";\nimport {\n  ADDFETCHARTICLE,\n  SWITCHARTICLEFETCH,\n  RESETARTICLEFETCH,\n} from \"../redux/actions\";\n\nexport default function Board(props) {\n  const dispatch = useDispatch();\n  const user = useSelector((state) => state.memberReducer.user);\n  console.log(user);\n  const fetchRequired = useSelector(\n    (state) => state.articleReducer.fetchRequired\n  );\n  console.log(fetchRequired);\n  const articleList = useSelector((state) => state.articleReducer.articleList);\n  const lastQuery = useSelector((state) => state.articleReducer.lastQuery);\n  useEffect(() => {\n    const handleScroll = () => {\n      app.util.handleScrollBottom(() => {\n        dispatch(SWITCHARTICLEFETCH(true));\n      });\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (lastQuery) {\n  }\n  useEffect(() => {\n    function batchFetchUserArticles(userUid) {\n      if (lastQuery === null) {\n        db.collection(\"Articles\")\n          .orderBy(\"date\", \"desc\")\n          .where(\"uid\", \"==\", userUid)\n          .limit(8)\n          .get()\n          .then((snapshot) => {\n            const tempArticleList = [...articleList];\n            snapshot.forEach((doc) => {\n              tempArticleList.push(doc.data());\n            });\n            const lastQuery = snapshot.docs[snapshot.docs.length - 1];\n            dispatch(ADDFETCHARTICLE(tempArticleList, lastQuery));\n          });\n      } else {\n        if (lastQuery) {\n          db.collection(\"Articles\")\n            .orderBy(\"date\", \"desc\")\n            .where(\"uid\", \"==\", userUid)\n            .startAfter(lastQuery)\n            .limit(8)\n            .get()\n            .then((snapshot) => {\n              const tempArticleList = [...articleList];\n              snapshot.forEach((doc) => {\n                tempArticleList.push(doc.data());\n              });\n              const lastQuery = snapshot.docs[snapshot.docs.length - 1];\n              dispatch(ADDFETCHARTICLE(tempArticleList, lastQuery));\n            });\n        }\n      }\n    }\n\n    if (user && fetchRequired) {\n      console.log(\"fetch start\");\n      batchFetchUserArticles(user.uid);\n    }\n  }, [fetchRequired, user]);\n  let articleSnapshotInit = false;\n  useEffect(() => {\n    console.log(\"her run!\", articleSnapshotInit);\n    let unsubscribe;\n    if (user && !articleSnapshotInit) {\n      articleSnapshotInit = true;\n    } else if (articleSnapshotInit === true) {\n      unsubscribe = db\n        .collection(\"Articles\")\n        .where(\"uid\", \"==\", user.uid)\n        .onSnapshot(() => {\n          dispatch(RESETARTICLEFETCH());\n        });\n      articleSnapshotInit = true;\n    }\n    return () => {\n      if (typeof unsubscribe === \"function\") {\n        unsubscribe();\n      }\n    };\n  }, [user]);\n  // useEffect(() => {\n  //   function checkArticleUpdate(uid) {\n  //     db.collection(\"Articles\")\n  //       .orderBy(\"date\", \"desc\")\n  //       .where(\"uid\", \"==\", uid)\n  //       .onSnapshot(function (querySnapshot) {\n  //         const list = [];\n\n  //         querySnapshot.forEach(function (doc) {\n  //           list.push({\n  //             title: doc.data().title,\n  //             content: doc.data().markDown.slice(100, 200),\n  //             id: doc.data().id,\n  //             tags: doc.data().tags,\n  //             link: doc.data().link,\n  //             readerHtml: doc.data().readerHtml,\n  //           });\n  //         });\n  //         dispatch(INITARTICLE(list));\n  //       });\n  //   }\n  //   if (user) {\n  //     checkArticleUpdate(user.uid);\n  //   }\n  // }, [user]);\n\n  return (\n    <div className={styles.boardWrapper}>\n      <div className={styles.title}>Saved Article</div>\n      <div className={styles.description}>\n        The article you saved from web and RSS feed, read it anytime you want!\n      </div>\n      <CardWrapper />\n    </div>\n  );\n}\n",["208","209"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/AddArticle.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Card.jsx",["210"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/MobileFolderTab.jsx",["211"],"import Button from \"@material-ui/core/Button\";\nimport CreateNewFolderOutlinedIcon from \"@material-ui/icons/CreateNewFolderOutlined\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\nimport { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styles from \"./FolderTab.module.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TreeView } from \"@material-ui/lab\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useSelector } from \"react-redux\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { Link } from \"react-router-dom\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport { app } from \"../../lib/lib.js\";\nimport AddArticle from \"../AddArticle\";\nimport { useDispatch } from \"react-redux\";\nimport { SWITCHARTICLE, INITARTICLEFOLDERS } from \"../../redux/actions\";\nimport { db } from \"../../firebase.js\";\nimport firebase from \"firebase/app\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport addTagFolderImg from \"../../imgs/add_new_folder.png\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport Folder from \"./Folder\";\n\nconst useStyles = makeStyles({\n  root: {\n    color: \"#B5B5B5\",\n    textAlign: \"left\",\n    padding: \"0px\",\n    flexGrow: 1,\n    maxWidth: 200,\n    marginBottom: \"15px\",\n  },\n});\n\nexport default function FolderTab(props) {\n  const itemstyle = makeStyles({\n    root: {\n      paddingLeft: \"25px\",\n      color: \"#B5B5B5\",\n      maxWidth: 200,\n      marginBottom: \"5px\",\n    },\n  });\n  const classes = useStyles();\n  const itemStyle = itemstyle();\n  const dispatch = useDispatch();\n  const [addArticle, setAddArticle] = useState(false);\n  const [tabChange, setTabChange] = useState(\"\");\n  const [editFolder, setEditFolder] = useState(false);\n  const [addFolderInput, setAddFolderInput] = useState(\"\");\n\n  const articleFolders = useSelector((state) => {\n    //console.log(state);\n    return state.articleReducer.articleFolders;\n  });\n\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  function onDragEnd(result) {\n    const { destination, source } = result;\n    //console.log(result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      //console.log(\"nothing should happended\");\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      //console.log(\"move inside same folder\");\n      const newArticleFolders = [...articleFolders];\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          //console.log(\"hihi\");\n          const newTags = [...folder.tags];\n          const moveItem = { ...newTags[source.index] };\n          //console.log(moveItem);\n          newTags.splice(source.index, 1);\n          newTags.splice(destination.index, 0, moveItem);\n          //console.log(newTags);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      dispatch(INITARTICLEFOLDERS(newArticleFolders));\n\n      //console.log(destination.index, source.index);\n      //console.log(source.droppableId);\n      //console.log(destination.droppableId);\n    }\n    if (destination.droppableId !== source.droppableId) {\n      //console.log(\"move to another folder\");\n      const newArticleFolders = [...articleFolders];\n      let moveItem;\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === source.droppableId) {\n          const newTags = [...folder.tags];\n          moveItem = { ...newTags[source.index] };\n          newTags.splice(source.index, 1);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(source.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          const newTags = [...folder.tags];\n\n          newTags.splice(destination.index, 0, moveItem);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      dispatch(INITARTICLEFOLDERS(newArticleFolders));\n    }\n  }\n\n  useEffect(() => {\n    //console.log(tabChange);\n    function getArticleFolders() {\n      if (user) {\n        app.article\n          .getMemberTagFoldersDetail(user.uid)\n          .then((articleFolders) => {\n            //console.log(articleFolders);\n            dispatch(INITARTICLEFOLDERS(articleFolders));\n\n            return articleFolders;\n          })\n          .then(async (articleFolders) => {\n            const tempFolderList = [];\n            for (let i = 0; i < articleFolders.length; i++) {\n              const tags = await app.getMemberFolderTags(articleFolders[i].id);\n              //console.log(tags);\n              tempFolderList.push({ ...articleFolders[i], tags: tags });\n            }\n            //console.log(tempFolderList);\n            return tempFolderList;\n          })\n          .then((newFolder) => {\n            //console.log(newFolder);\n            dispatch(INITARTICLEFOLDERS(newFolder));\n          });\n      }\n    }\n    getArticleFolders();\n  }, [user, tabChange]);\n\n  function showArticleFolders(folders) {\n    const articleFolderList = [];\n    if (folders.length > 0) {\n      for (const i in folders) {\n        articleFolderList.push(\n          <Droppable droppableId={folders[i].id}>\n            {(provided) => (\n              <TreeItem\n                className={itemStyle.root}\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                key={folders[i].id}\n                nodeId={folders[i].id}\n                label={\n                  <div className={styles.labelWrapper}>\n                    <FolderOpenIcon\n                      style={{ fontSize: 20, color: \"#B5B5B5\" }}\n                    />\n                    <div className={styles.labelTitle}>{folders[i].name}</div>\n                  </div>\n                }\n                onClick={() => {\n                  //console.log(folders[i].id);\n                  // dispatch(SWITCHARTICLE(folders[i].id));\n                }}\n              >\n                <Folder\n                  user={user}\n                  folderTags={folders[i].tags}\n                  key={folders[i].id}\n                />\n                {provided.placeholder}\n              </TreeItem>\n            )}\n          </Droppable>\n        );\n      }\n    }\n    return articleFolderList;\n  }\n  function addArticleFolder(name, uid) {\n    db.collection(\"articleFolders\")\n      .add({\n        name: name,\n        uid: uid,\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            articleFolders: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      })\n      .then(() => {\n        setTabChange(tabChange + 1);\n      });\n  }\n  const articleFolderList = showArticleFolders(articleFolders);\n  // const allTabList = showTabTreeList(tabs);\n\n  return (\n    <div className={styles.mobileFolderTabWrapper}>\n      <div className={styles.mobileFolderTab}>\n        <Link to={\"/board\"}>\n          <div className={styles.sectionTitle}>My Board</div>\n          <div\n            className={styles.importWrapper}\n            onClick={() => {\n              setAddArticle(true);\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<AddOutlinedIcon />}\n            >\n              Import Article\n            </Button>\n          </div>\n          <TreeView\n            className={classes.root}\n            defaultExpanded={[\"\"]}\n            defaultCollapseIcon={<ExpandMoreIcon />}\n            defaultExpandIcon={<ChevronRightIcon />}\n          >\n            <div\n              className={styles.keyTitleWrapper}\n              onClick={() => {\n                //console.log(\"all\");\n                dispatch(SWITCHARTICLE(\"all\"));\n              }}\n            >\n              <DescriptionIcon style={{ fontSize: 20, color: \"#2074ec\" }} />\n              <div className={styles.keyTitle}>All Articles</div>\n            </div>\n\n            <div className={styles.tagWrapper}>\n              <div className={styles.tag}>Tags</div>\n              <CreateNewFolderOutlinedIcon\n                onClick={() => {\n                  setEditFolder(true);\n                }}\n                className={styles.setting}\n                fontSize=\"small\"\n                style={{ color: \"#b2b2b2\" }}\n              />\n            </div>\n            <DragDropContext onDragEnd={onDragEnd}>\n              {articleFolderList}\n            </DragDropContext>\n          </TreeView>\n          {addArticle\n            ? createPortal(\n                <div className={styles.popup}>\n                  <div\n                    className={styles.blur}\n                    onClick={() => {\n                      setAddArticle(false);\n                    }}\n                  ></div>\n                  <AddArticle\n                    user={user}\n                    close={() => {\n                      setAddArticle(false);\n                    }}\n                  />\n                </div>,\n                document.body\n              )\n            : \"\"}\n          {editFolder\n            ? createPortal(\n                <div className={styles.popup}>\n                  <div\n                    className={styles.blur}\n                    onClick={() => {\n                      setEditFolder(false);\n                    }}\n                  ></div>\n                  <div className={styles.addFolder}>\n                    <div className={styles.addTitle}>Add New Folder</div>\n                    <div className={styles.addSubTitle}>\n                      Create folder for the tags you created\n                    </div>\n                    <label htmlFor=\"addForm\" className={styles.addFolderLabel}>\n                      Enter new folder name\n                    </label>\n                    <div className={styles.addFormWrapper}>\n                      <form id=\"addForm\" action=\"\">\n                        <input\n                          className={styles.addInput}\n                          type=\"text\"\n                          value={addFolderInput}\n                          onChange={(e) => {\n                            setAddFolderInput(e.target.value);\n                          }}\n                        />\n                        <button\n                          type=\"submit\"\n                          className={styles.saveBtn}\n                          form=\"addForm\"\n                          onClick={() => {\n                            if (user) {\n                              addArticleFolder(addFolderInput, user.uid);\n                              setEditFolder(false);\n                            } else {\n                              alert(\"Please login to add folder!\");\n                            }\n                          }}\n                        >\n                          Save\n                        </button>\n                        <button\n                          onClick={() => {\n                            setEditFolder(false);\n                          }}\n                          className={styles.cancelBtn}\n                        >\n                          Cancel\n                        </button>\n                      </form>\n                    </div>\n                    <div className={styles.tagsImgWrapper}>\n                      <img src={addTagFolderImg} alt=\"\" />\n                    </div>\n                  </div>\n                </div>,\n                document.body\n              )\n            : \"\"}\n        </Link>\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard.jsx",["212","213","214","215","216","217"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { db } from \"../../firebase.js\";\nimport RSSCard from \"./RSSCard\";\nimport styles from \"./RSSBoard.module.css\";\nimport { app } from \"../../lib/lib.js\";\nimport RSSPage from \"./RSSPage\";\nimport \"./RSSPage.css\";\nexport default function Board(props) {\n  const [allFeeds, setAllFeeds] = useState([]);\n  const [channelFeeds, setChannelFeeds] = useState({});\n  const [lastVisible, setLastVisible] = useState(0);\n  const [showPage, setShowPage] = useState(false);\n  const [feedItem, setFeedItem] = useState(\"\");\n  const [lastQueryDoc0, setLastQueryDoc0] = useState(\"\");\n  const [queryPaging, setQueryPaging] = useState(0);\n\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  function fetchUserFeeds(userUid, paging) {\n    fetch(\n      `https://www.shopcard.site/route/rss/userfeeds?uid=${userUid}&paging=${paging}`\n    ).then((res) => {\n      if (res.status !== 200) {\n        console.log(\"sth wrong..\", res);\n      } else {\n        res.json().then((data) => {\n          console.log(data);\n          setAllFeeds([...allFeeds].concat(data.feeds));\n        });\n      }\n    });\n  }\n  function batchFetchAllFeeds(userRSSList, lastVisible) {\n    //console.log(userRSSList);\n    if (lastVisible === 0 && userRSSList[0]) {\n      //console.log(\"last visible equal zero!\");\n      db.collection(\"RSSItem\")\n        .orderBy(\"pubDate\", \"desc\")\n        .where(\"RSSId\", \"in\", userRSSList.slice(0, 10))\n        .limit(7)\n        .get()\n        .then((snapshot) => {\n          const items = [...allFeeds];\n          snapshot.forEach((doc) => {\n            //console.log(doc.data());\n\n            items.push(doc.data());\n          });\n          setLastQueryDoc0(snapshot.docs[snapshot.docs.length - 1]);\n          setAllFeeds(items);\n          //console.log(\"se set items as \", items);\n        });\n    } else {\n      if (lastQueryDoc0 && userRSSList[0]) {\n        //console.log(\"else start, the last visible is\", lastVisible);\n\n        db.collection(\"RSSItem\")\n          .orderBy(\"pubDate\", \"desc\")\n          .where(\"RSSId\", \"in\", userRSSList.slice(0, 9))\n          .startAfter(lastQueryDoc0)\n          .limit(7)\n          .get()\n          .then((snapshot) => {\n            const items = [...allFeeds];\n            snapshot.forEach((doc) => {\n              items.push(doc.data());\n            });\n\n            setLastQueryDoc0(snapshot.docs[snapshot.docs.length - 1]);\n            setAllFeeds(items);\n          });\n      }\n    }\n  }\n\n  function renderAllFeeds(feedItems) {\n    if (feedItems) {\n      console.log(feedItems);\n      const feedList = [];\n      for (const i in feedItems) {\n        feedList.push(\n          <RSSCard\n            item={feedItems[i]}\n            onClick={(e) => {\n              setShowPage(true);\n              setFeedItem(feedItems[i]);\n            }}\n          />\n        );\n      }\n      return (\n        <div className={styles.board}>\n          <h1 className={styles.title}>My Feeds</h1>\n          <div className={styles.description}>\n            Feeds from your subscribed RSS\n          </div>\n          {feedList}\n        </div>\n      );\n    } else {\n      return (\n        <div className={styles.board}>\n          <h1 className={styles.title}>Subscribed Feeds</h1>\n          <div className={styles.content}>You dont have any feed yet!</div>\n        </div>\n      );\n    }\n  }\n\n  function renderFeedPage(feedItem) {\n    return (\n      <RSSPage\n        item={feedItem}\n        onClick={() => {\n          setShowPage(false);\n        }}\n      />\n    );\n  }\n\n  const ChannelRSSId = useSelector((state) => {\n    return state.RSSReducer.ChannelRSSId;\n  });\n\n  useEffect(() => {\n    const handleScroll = () => {\n      app.util.handleScroll(queryPaging, setQueryPaging);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [queryPaging]);\n\n  useEffect(() => {\n    console.log(user);\n    if (user) {\n      fetchUserFeeds(user.uid, queryPaging);\n    }\n  }, [user, queryPaging]);\n  useEffect(() => {\n    fetchChannelFeed();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ChannelRSSId]);\n\n  let allFeedsOutome;\n  if (ChannelRSSId === \"all\") {\n    //console.log(\"channel id is all\");\n    //console.log(allFeeds);\n    allFeedsOutome = renderAllFeeds(allFeeds);\n  } else if (ChannelRSSId) {\n    allFeedsOutome = renderChannelFeeds();\n  }\n\n  async function fetchChannelFeed() {\n    let items;\n    let RSS;\n    if (ChannelRSSId) {\n      //console.log(ChannelRSSId);\n      RSS = await app.getRSSInfo(ChannelRSSId);\n      items = await app.getChannelFeeds(ChannelRSSId);\n      //console.log(RSS, items);\n      setChannelFeeds({\n        RSS: RSS,\n        items: items,\n      });\n    }\n  }\n  function renderChannelFeeds() {\n    if (channelFeeds.items) {\n      //console.log(channelFeeds);\n      const items = channelFeeds.items;\n      const RSS = channelFeeds.RSS;\n      const feedList = [];\n      for (const i in items) {\n        //console.log(items[i]);\n        feedList.push(\n          <RSSCard\n            key={items[i].id}\n            item={items[i]}\n            onClick={(e) => {\n              //console.log(\"hihi\");\n              setShowPage(true);\n              setFeedItem(items[i]);\n            }}\n          />\n        );\n      }\n      return (\n        <div className={styles.board}>\n          <h1 className={styles.title}>{RSS.title}</h1>\n          <div\n            className={styles.content}\n            dangerouslySetInnerHTML={{ __html: RSS.description }}\n          ></div>\n          {feedList}\n        </div>\n      );\n    }\n  }\n  const feedPage = renderFeedPage(feedItem);\n  return (\n    <div className={styles.boardWrapper}>\n      {allFeedsOutome}\n      {showPage ? (\n        <div className={styles.popup}>\n          <div\n            className={styles.blur}\n            onClick={() => {\n              setShowPage(false);\n            }}\n          ></div>\n          {feedPage}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSChannel.jsx",["218","219"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport { db } from \"../../firebase.js\";\nimport RSSCard from \"./RSSCard\";\n\nimport styles from \"./RSSBoard.module.css\";\nimport { app } from \"../../lib/lib.js\";\nimport RSSPage from \"./RSSPage\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./RSSPage.css\";\nexport default function Board(props) {\n  const [isFollowed, setIsFollowed] = useState(false);\n  const [allFeeds, setAllFeeds] = useState([]);\n\n  const [lastVisible, setLastVisible] = useState(0);\n  const [showPage, setShowPage] = useState(false);\n  const [feedItem, setFeedItem] = useState(\"\");\n  const [lastQueryDoc, setLastQueryDoc] = useState(\"\");\n  const location = useLocation();\n  const search = location.search;\n  const params = new URLSearchParams(search);\n  const channelTitle = params.get(\"title\");\n  const channelDescription = params.get(\"description\");\n\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n\n  function batchFetchAllFeeds(channelRSSId, lastVisible) {\n    //console.log(channelRSSId);\n    if (lastVisible === 0) {\n      //console.log(\"last visible equal zero!\");\n      db.collection(\"RSSItem\")\n        .where(\"RSSId\", \"==\", channelRSSId)\n        .orderBy(\"pubDate\", \"desc\")\n        .limit(15)\n        .get()\n        .then((snapshot) => {\n          //console.log(\"batchfetch start\");\n          const items = [...allFeeds];\n          snapshot.forEach((doc) => {\n            items.push(doc.data());\n          });\n          setLastQueryDoc(snapshot.docs[14]);\n\n          setAllFeeds(items);\n          //console.log(\"se set items as \", items);\n        });\n    } else {\n      if (lastQueryDoc) {\n        //console.log(\"else start, the last visible is\", lastVisible);\n\n        db.collection(\"RSSItem\")\n          .where(\"RSSId\", \"==\", channelRSSId)\n          .orderBy(\"pubDate\", \"desc\")\n          .startAfter(lastQueryDoc)\n          .limit(7)\n          .get()\n          .then((snapshot) => {\n            const items = [...allFeeds];\n            snapshot.forEach((doc) => {\n              items.push(doc.data());\n            });\n\n            setLastQueryDoc(snapshot.docs[snapshot.docs.length - 1]);\n            setAllFeeds(items);\n          });\n      }\n    }\n  }\n\n  function renderAllFeeds(feedItems) {\n    if (feedItems) {\n      const feedList = [];\n      for (const i in feedItems) {\n        feedList.push(\n          <RSSCard\n            item={feedItems[i]}\n            onClick={(e) => {\n              setShowPage(true);\n              setFeedItem(feedItems[i]);\n            }}\n          />\n        );\n      }\n      return (\n        <div className={styles.board}>\n          <Link to=\"/home/channels\" className={styles.arrowBack}>\n            <ArrowBack style={{ color: \"#FFFCEC\" }} />\n          </Link>\n          <h1 className={styles.title}>{channelTitle} </h1>\n          <div className={styles.channelDescription}>{channelDescription}</div>\n          {isFollowed ? (\n            <div className={styles.channelSubscribed}>Following</div>\n          ) : (\n            <div\n              className={styles.channelSubscribe_btn}\n              onClick={() => {\n                //console.log(\"add\", props.channelId);\n                app.addRSSToMember(user.uid, props.channelId, () => {\n                  setIsFollowed(true);\n                });\n              }}\n            >\n              Follow\n            </div>\n          )}\n          {feedList}\n        </div>\n      );\n    }\n  }\n\n  function renderFeedPage(feedItem) {\n    return (\n      <RSSPage\n        item={feedItem}\n        onClick={() => {\n          setShowPage(false);\n        }}\n      />\n    );\n  }\n  const userRSSList = useSelector((state) => {\n    return state.RSSReducer.UserRSSList;\n  });\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const winScroll =\n        document.body.scrollTop || document.documentElement.scrollTop;\n\n      const height =\n        document.documentElement.scrollHeight -\n        document.documentElement.clientHeight;\n      if (winScroll > height - 20) {\n        //console.log(\"reach the bottom!\", lastVisible);\n\n        const newLast = lastVisible + 7;\n        setLastVisible(newLast);\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [lastVisible]);\n\n  useEffect(() => {\n    if (userRSSList) {\n      if (userRSSList.includes(props.channelId)) {\n        setIsFollowed(true);\n      }\n    }\n  }, [userRSSList]);\n  useEffect(() => {\n    batchFetchAllFeeds(props.channelId, lastVisible);\n  }, [props.channelId, lastVisible]);\n\n  const feedPage = renderFeedPage(feedItem);\n  const allFeedsOutome = renderAllFeeds(allFeeds);\n  return (\n    <div>\n      {allFeedsOutome}\n      {showPage ? (\n        <div className={styles.popup}>\n          <div\n            className={styles.blur}\n            onClick={() => {\n              setShowPage(false);\n            }}\n          ></div>\n          {feedPage}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n",["220","221"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSFolder.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/Folder.jsx",[],["222","223"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Landing.jsx",[],["224","225"],"/Users/kevinzhang/Documents/Taggy/client/app/src/lib/lib.js",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Article/Aritcle.jsx",["226","227","228"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Graph/GraphBoard.jsx",["229"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/App.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Graph/Graph.jsx",["230","231","232"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupFolderSub.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupFolderTab.jsx",["233"],"import { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styles from \"../SideTab/FolderTab.module.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TreeView } from \"@material-ui/lab\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useSelector } from \"react-redux\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { app } from \"../../lib/lib.js\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  SWITCHARTICLE,\n  GROUPINIT,\n  INITGROUPSELECT,\n  SWITCHGROUPSELECT,\n} from \"../../redux/actions\";\nimport { db } from \"../../firebase.js\";\nimport firebase from \"firebase/app\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nimport GroupFolerSub from \"./GroupFolderSub\";\n\nconst useStyles = makeStyles({\n  root: {\n    color: \"#B5B5B5\",\n\n    flexGrow: 1,\n    maxWidth: 400,\n    marginBottom: \"10px\",\n  },\n});\n\nexport default function GroupFolderTab() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [tabChange, setTabChange] = useState(\"\");\n  const [editFolder, setEditFolder] = useState(false);\n  const [addGroup, setAddGroup] = useState(false);\n  const [addGroupInput, setAddGroupInput] = useState(\"\");\n  const [addFolderInput, setAddFolderInput] = useState(\"\");\n  const [articleFolders, setArticleFolders] = useState([]);\n\n  const groups = useSelector((state) => {\n    return state.groupReducer.groups;\n  });\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  function onDragEnd(result) {\n    const { destination, source } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      //console.log(\"nothing should happended\");\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      //console.log(\"move inside same folder\");\n      const newArticleFolders = [...articleFolders];\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          //console.log(\"hihi\");\n          const newTags = [...folder.tags];\n          const moveItem = { ...newTags[source.index] };\n          //console.log(moveItem);\n          newTags.splice(source.index, 1);\n          newTags.splice(destination.index, 0, moveItem);\n          //console.log(newTags);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      setArticleFolders(newArticleFolders);\n      //console.log(destination.index, source.index);\n      //console.log(source.droppableId);\n      //console.log(destination.droppableId);\n    }\n    if (destination.droppableId !== source.droppableId) {\n      //console.log(\"move to another folder\");\n      const newArticleFolders = [...articleFolders];\n      let moveItem;\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === source.droppableId) {\n          const newTags = [...folder.tags];\n          moveItem = { ...newTags[source.index] };\n          newTags.splice(source.index, 1);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(source.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      newArticleFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          const newTags = [...folder.tags];\n\n          newTags.splice(destination.index, 0, moveItem);\n          folder.tags = newTags;\n          const firestoreTagArr = [];\n          newTags.forEach((tag) => {\n            firestoreTagArr.push(tag.id);\n          });\n          //console.log(firestoreTagArr);\n          db.collection(\"articleFolders\").doc(destination.droppableId).update({\n            tags: firestoreTagArr,\n          });\n        }\n      });\n      setArticleFolders(newArticleFolders);\n    }\n  }\n\n  useEffect(() => {\n    function getMemberGroups(user) {\n      return db\n        .collection(\"Member\")\n        .doc(user.uid)\n        .get()\n        .then((doc) => {\n          //console.log(doc.data());\n          return doc.data().board;\n        });\n    }\n    function getGroupDbInfo(boardId) {\n      //console.log(boardId);\n      return db\n        .collection(\"GroupBoard\")\n        .doc(boardId)\n        .get()\n        .then((doc) => {\n          return {\n            id: doc.data().id,\n            name: doc.data().name,\n            articleFolders: doc.data().articleFolders,\n          };\n        });\n    }\n    async function memberGroupInit(user) {\n      const groupIds = await getMemberGroups(user);\n\n      const groups = {};\n      //console.log(groupIds);\n      for (const i in groupIds) {\n        const info = await getGroupDbInfo(groupIds[i]);\n        groups[groupIds[i]] = info;\n      }\n      console.warn(groups);\n      if (groups[Object.keys(groups)[0]]) {\n        console.warn(groups[Object.keys(groups)[0]].id);\n        dispatch(\n          INITGROUPSELECT(\n            groups[Object.keys(groups)[0]].id,\n            groups[Object.keys(groups)[0]].name\n          )\n        );\n      }\n\n      //=========!!!!!!!!!!!!!!!!!!!===========\n      // dispatch(GROUPINIT(groups));\n\n      for (const i in groupIds) {\n        const info = await getGroupDbInfo(groupIds[i]);\n        //info ={  id: \"group1\",\n        //name: front end,\n        //articleFolders: [id1, id2, id3],}\n        const folders = await app.getGroupArticleFolders(groupIds[i]);\n        //folders=[{id, name, tags}, {id, name, tags}]\n        //console.log(folders);\n        const folderWithTagInfo = folders.map(async (folder) => {\n          const tags = await app.getMemberFolderTags(folder.id);\n          folder.tags = tags;\n          return folder;\n        });\n\n        const group = await Promise.all(folderWithTagInfo).then((folder) => {\n          info.articleFolders = folder;\n          return info;\n        });\n        //console.log(group);\n        const groupId = groupIds[i];\n        groups[groupId] = group;\n        //console.log(groups);\n      }\n      //console.log(groups);\n\n      dispatch(GROUPINIT(groups));\n    }\n    async function updateMemberGroup(user, changeId) {\n      const groupIds = await getMemberGroups(user);\n      const groups = {};\n      //console.log(groupIds);\n      for (const i in groupIds) {\n        const info = await getGroupDbInfo(groupIds[i]);\n        groups[groupIds[i]] = info;\n      }\n      //console.log(groups);\n      //console.log(changeId);\n      dispatch(SWITCHGROUPSELECT(groups[changeId].id, groups[changeId].name));\n      //=========!!!!!!!!!!!!!!!!!!!===========\n      // dispatch(GROUPINIT(groups));\n\n      for (const i in groupIds) {\n        const info = await getGroupDbInfo(groupIds[i]);\n        //info ={  id: \"group1\",\n        //name: front end,\n        //articleFolders: [id1, id2, id3],}\n        const folders = await app.getGroupArticleFolders(groupIds[i]);\n        //folders=[{id, name, tags}, {id, name, tags}]\n        //console.log(folders);\n        const folderWithTagInfo = folders.map(async (folder) => {\n          const tags = await app.getMemberFolderTags(folder.id);\n          folder.tags = tags;\n          return folder;\n        });\n\n        const group = await Promise.all(folderWithTagInfo).then((folder) => {\n          info.articleFolders = folder;\n          return info;\n        });\n        //console.log(group);\n        const groupId = groupIds[i];\n        groups[groupId] = group;\n        //console.log(groups);\n      }\n      //console.log(groups);\n\n      dispatch(GROUPINIT(groups));\n    }\n    if (tabChange) {\n      updateMemberGroup(user, tabChange).then(() => {});\n    } else if (user) {\n      memberGroupInit(user).then((groups) => {});\n    }\n  }, [user, tabChange]);\n\n  function addArticleFolder(name, uid) {\n    db.collection(\"articleFolders\")\n      .add({\n        name: name,\n        uid: uid,\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            articleFolders: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      });\n  }\n  function addGroupBoard(name, uid) {\n    db.collection(\"GroupBoard\")\n      .add({\n        name: name,\n        member: [uid],\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id, articleFolders: [\"un\" + docRef.id] });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            board: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n        return id;\n      })\n      .then((id) => {\n        db.collection(\"articleFolders\")\n          .doc(\"un\" + id)\n          .set({\n            id: \"un\" + id,\n            name: \"Uncategorized\",\n          });\n        return id;\n      })\n      .then((id) => {\n        setTabChange(id);\n      });\n  }\n  function renderGroupTabs(groups) {\n    const groupTabs = [];\n    //console.log(groups);\n    for (const key in groups) {\n      //console.log(groups[key]);\n      groupTabs.push(\n        <TreeView\n          className={classes.root}\n          defaultExpanded={[\"\"]}\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n          onClick={() => {\n            //console.log(groups[key].name);\n            dispatch(SWITCHGROUPSELECT(key, groups[key].name));\n          }}\n        >\n          <TreeItem\n            nodeId={groups[key].name}\n            label={\n              <div className={styles.labelWrapper}>\n                <PeopleAltIcon />\n                <div className={styles.labelTitle}>{groups[key].name}</div>\n              </div>\n            }\n            onClick={() => {\n              //console.log(\"all\");\n              dispatch(SWITCHARTICLE(\"all\"));\n            }}\n          >\n            <TreeItem\n              nodeId={\"tagAll_\" + groups[key].name}\n              label={\n                <div className={styles.labelWrapper}>\n                  <div className={styles.labelTitle}>All Articles</div>\n                </div>\n              }\n              onClick={() => {\n                //console.log(\"all\");\n                dispatch(SWITCHARTICLE(\"all\"));\n              }}\n            ></TreeItem>\n            {/* <TreeItem\n              nodeId=\"unTag2\"\n              label={\n                <div className={styles.labelWrapper}>\n                  <MarkunreadIcon style={{ fontSize: 20, color: \"#5B5B5B\" }} />\n                  <div className={styles.labelTitle}>Untaged</div>\n                </div>\n              }\n            /> */}\n            <DragDropContext onDragEnd={onDragEnd}>\n              <GroupFolerSub folders={groups[key].articleFolders} />\n            </DragDropContext>\n          </TreeItem>\n        </TreeView>\n      );\n    }\n    return groupTabs;\n  }\n  const groupTabs = renderGroupTabs(groups);\n  // const articleFolderList = showArticleFolders(articleFolders);\n  // const allTabList = showTabTreeList(tabs);\n\n  return (\n    <div className={styles.folderTabWrapper}>\n      <div className={styles.folderTab}>\n        <div className={styles.sectionTitle}>Group Boards</div>\n        <div\n          className={styles.subTitle}\n          onClick={() => {\n            setAddGroup(true);\n          }}\n        >\n          Create New Group\n        </div>\n        {groupTabs}\n\n        {editFolder\n          ? createPortal(\n              <div className={styles.popup}>\n                <div\n                  className={styles.blur}\n                  onClick={() => {\n                    setEditFolder(false);\n                  }}\n                ></div>\n                <div className={styles.addFolder}>\n                  <div className={styles.addTitle}>Add New Folder</div>\n                  <form id=\"addForm\" action=\"\">\n                    <input\n                      className={styles.input}\n                      type=\"text\"\n                      placeholder=\"Folder Name\"\n                      value={addFolderInput}\n                      onChange={(e) => {\n                        setAddFolderInput(e.target.value);\n                      }}\n                    />\n                    <button\n                      type=\"submit\"\n                      className={styles.saveBtn}\n                      form=\"addForm\"\n                      onClick={() => {\n                        if (user) {\n                          addArticleFolder(addFolderInput, user.uid);\n                          setEditFolder(false);\n                        } else {\n                          alert(\"Please login to add folder!\");\n                        }\n                      }}\n                    >\n                      Save\n                    </button>\n                    <button\n                      onClick={() => {\n                        setEditFolder(false);\n                      }}\n                      className={styles.cancelBtn}\n                    >\n                      Cancel\n                    </button>\n                  </form>\n                </div>\n              </div>,\n              document.body\n            )\n          : \"\"}\n        {addGroup\n          ? createPortal(\n              <div className={styles.popup}>\n                <div\n                  className={styles.blur}\n                  onClick={() => {\n                    setAddGroup(false);\n                  }}\n                ></div>\n                <div className={styles.addFolder}>\n                  <div className={styles.addTitle}>Create New Group Board</div>\n                  <form id=\"addForm\" action=\"\">\n                    <input\n                      className={styles.input}\n                      type=\"text\"\n                      placeholder=\"Group Board Name\"\n                      value={addGroupInput}\n                      onChange={(e) => {\n                        setAddGroupInput(e.target.value);\n                      }}\n                    />\n                    <button\n                      type=\"submit\"\n                      className={styles.saveBtn}\n                      form=\"addForm\"\n                      onClick={() => {\n                        if (user) {\n                          addGroupBoard(addGroupInput, user.uid);\n                          setAddGroup(false);\n                        } else {\n                          alert(\"Please login to add group!\");\n                        }\n                      }}\n                    >\n                      Save\n                    </button>\n                    <button\n                      onClick={() => {\n                        setAddGroup(false);\n                      }}\n                      className={styles.cancelBtn}\n                    >\n                      Cancel\n                    </button>\n                  </form>\n                </div>\n              </div>,\n              document.body\n            )\n          : \"\"}\n        <div\n          className={styles.subTitle}\n          onClick={() => {\n            setEditFolder(true);\n          }}\n        >\n          Add Folder\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Today.jsx",["234","235"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Explore.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSExplore.jsx",["236","237","238","239"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSPage.jsx",["240"],"import { Zoom } from \"react-toastify\";\n\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport RSSCard from \"../RSS/RSSCard\";\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Chip } from \"@material-ui/core\";\nimport { toast } from \"react-toastify\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\nimport styles from \"./RSSPage.module.css\";\n\nimport BookmarkBorderOutlinedIcon from \"@material-ui/icons/BookmarkBorderOutlined\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { useSelector } from \"react-redux\";\nconst CustomTooltip = withStyles((theme) => ({\n  tooltip: {\n    color: \"white\",\n    fontFamily: \"Open Sans\",\n    fontSize: 14,\n  },\n}))(Tooltip);\n\nexport default function RSSPage({ item, onClick }) {\n  const [tagRecoms, setTagRecoms] = useState([]);\n  const [newItem, setNewItem] = useState([]);\n\n  useEffect(() => {\n    async function getFeedTagsRecommend(feedId) {\n      const response = await fetch(\n        `https://www.shopcard.site/route/rss/feedtags?feedid=${feedId}`\n      );\n      return response.json();\n    }\n    function setFeedTagRecommend(data) {\n      console.log(data);\n      setTagRecoms(data);\n    }\n    getFeedTagsRecommend(newItem.FeedId || item.id).then(setFeedTagRecommend);\n  }, [newItem]);\n\n  function renderFeedTags(tags) {\n    const tagChips = [];\n    if (tags) {\n      tags.forEach((tag) => {\n        console.log(tag);\n        tagChips.push(\n          <Chip\n            size=\"small\"\n            label={\"#\" + tag}\n            style={{\n              marginRight: \"6px\",\n              border: \"solid 1px white\",\n              color: \"white\",\n            }}\n            variant=\"outlined\"\n          />\n        );\n      });\n    }\n    return tagChips;\n  }\n  function renderMoreFeeds(feeds) {\n    const moreFeeds = [];\n    if (feeds) {\n      feeds.forEach((feed) => {\n        console.log(feed);\n        moreFeeds.push(\n          <RSSCard\n            item={feed}\n            onClick={() => {\n              setNewItem(feed);\n              console.log(\"hihihihi\");\n              document\n                .querySelector(\"#RSSPage\")\n                [`scrollTo`]({ top: 0, behavior: `smooth` });\n            }}\n          />\n        );\n      });\n    }\n    return moreFeeds;\n  }\n  const notify_success = () =>\n    toast.dark(\n      <div className=\"toastBody\">\n        <BookmarkBorderOutlinedIcon\n          style={{ color: \"rgba(255,255,255, 0.6)\" }}\n        />\n        <div className=\"toastText\">\n          Saved to<strong> My Board </strong>\n          <Link to=\"/board\">\n            <strong>View item</strong>\n          </Link>\n        </div>\n      </div>,\n\n      {\n        position: \"top-center\",\n        autoClose: 5000,\n        transition: Zoom,\n        hideProgressBar: true,\n        closeOnClick: false,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      }\n    );\n  const notify_fail = () =>\n    toast.warn(\n      <div>fail, please try again later</div>,\n\n      {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeOnClick: false,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      }\n    );\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  function postDataToServer(\n    url,\n    data = {\n      url: \"www.sylish.com\",\n      uid: \"12344\",\n    }\n  ) {\n    fetch(url, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(function (response) {\n        if (response.status !== 200) {\n          notify_fail();\n          return;\n        }\n        response.json().then(function (data) {\n          //console.log(data);\n          notify_success();\n        });\n      })\n      .catch(function (err) {\n        //console.log(\"Fetch Error :-S\", err);\n        notify_fail();\n      });\n  }\n\n  let youtubeUrl = \"\";\n  if (item.media) {\n    youtubeUrl = item.media[0][\"media:content\"][0][\"$\"][\"url\"].replace(\n      \"https://www.youtube.com/v/\",\n      \"\"\n    );\n  }\n  const tagChips = renderFeedTags(tagRecoms.tags);\n  const moreFeeds = renderMoreFeeds(tagRecoms.feeds);\n  return (\n    <div>\n      {item.media ? (\n        <div className={styles.page} id=\"RSSPage\">\n          <div className={styles.head}>\n            <div className={styles.arrowWrapper}>\n              <ArrowBack\n                className={styles.Icon}\n                style={{ color: \"rgba(255,255,255, 0.6)\", cursor: \"pointer\" }}\n                onClick={onClick}\n              />\n            </div>\n            <CustomTooltip title=\"save to my board\" placement=\"right\" arrow>\n              <div className={styles.arrowWrapper}>\n                <BookmarkBorderIcon\n                  className={styles.Icon}\n                  style={{ color: \"rgba(255,255,255, 0.6)\", cursor: \"pointer\" }}\n                  onClick={() => {\n                    postDataToServer(\n                      \"https://www.shopcard.site/route/article/import\",\n                      {\n                        url: newItem.link || item.link,\n                        uid: user.uid,\n                      }\n                    );\n                  }}\n                />\n              </div>\n            </CustomTooltip>\n          </div>\n          <div className={styles.title}>{newItem.title || item.title}</div>\n          {tagChips}\n          <iframe\n            width=\"640\"\n            height=\"390\"\n            title=\"hihi\"\n            src={\"https://www.youtube.com/embed/\" + youtubeUrl}\n          ></iframe>\n          <div\n            dangerouslySetInnerHTML={{\n              __html:\n                newItem.content || item.content || item[\"content:encoded\"],\n            }}\n            className={styles.content}\n          ></div>\n        </div>\n      ) : (\n        <div className={styles.page} id=\"RSSPage\">\n          <div className={styles.head}>\n            <div className={styles.arrowWrapper}>\n              <ArrowBack\n                className={styles.Icon}\n                style={{ color: \"rgba(255,255,255, 0.6)\", cursor: \"pointer\" }}\n                onClick={onClick}\n              />\n            </div>\n            <CustomTooltip title=\"save to my board\" placement=\"right\" arrow>\n              <div className={styles.arrowWrapper}>\n                <BookmarkBorderIcon\n                  className={styles.Icon}\n                  style={{ color: \"rgba(255,255,255, 0.6)\", cursor: \"pointer\" }}\n                  onClick={() => {\n                    postDataToServer(\n                      \"https://www.shopcard.site/route/article/import\",\n                      {\n                        url: newItem.link || item.link,\n                        uid: user.uid,\n                      }\n                    );\n                  }}\n                />\n              </div>\n            </CustomTooltip>\n          </div>\n          <div className={styles.title}>{newItem.title || item.title}</div>\n          <div className={styles.chipsWrapper}>{tagChips}</div>\n\n          <div\n            dangerouslySetInnerHTML={{\n              __html:\n                newItem.content || item.content || item[\"content:encoded\"],\n            }}\n            className={styles.content}\n          ></div>\n          <div className={styles.more}>More from Taggy</div>\n\n          <div>{moreFeeds}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/firebase.js",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSSearch.jsx",["241","242","243","244","245"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/FolderTab.jsx",["246","247","248","249","250","251"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSBoard_Today_RSSList.js",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/test/firestore_test_config.js",["252"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/CardWrapper.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/RSS_Reducer.jsx",["253"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/MobileRSSTab.jsx",["254","255","256","257","258","259","260","261","262","263","264","265","266","267","268"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/FindRSS.jsx",["269"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Member/Signup.jsx",["270","271","272","273"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/SearchRSS.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/MyRouter.jsx",["274"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Group/GroupBoard.jsx",["275","276","277","278","279","280","281","282","283"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/Member/Signin.jsx",["284","285","286","287","288","289"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/FunctionTab.jsx",["290","291","292","293","294","295","296"],"/Users/kevinzhang/Documents/Taggy/client/app/src/reportWebVitals.js",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/member_Reducer.jsx",["297"],"//reducer\nimport { nanoid } from \"nanoid\";\n\nconst member_Reducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"SETMEMBER\":\n      return {\n        ...state,\n        user: {\n          uid: action.uid,\n          displayName: action.displayName,\n          email: action.email,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default member_Reducer;\n",["298","299"],"/Users/kevinzhang/Documents/Taggy/client/app/src/hooks/useD3.js",["300","301"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSCard.jsx",["302","303","304","305"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/RSS/RSSTab.jsx",["306","307","308","309","310","311"],"import Tooltip from \"@material-ui/core/Tooltip\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styles from \"../SideTab/FolderTab.module.css\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { TreeView } from \"@material-ui/lab\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useSelector } from \"react-redux\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { Link } from \"react-router-dom\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\nimport Button from \"@material-ui/core/Button\";\nimport CreateNewFolderOutlinedIcon from \"@material-ui/icons/CreateNewFolderOutlined\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport { SWITCHRSS } from \"../../redux/actions\";\nimport { app } from \"../../lib/lib.js\";\nimport { useDispatch } from \"react-redux\";\nimport { db } from \"../../firebase.js\";\nimport firebase from \"firebase/app\";\nimport ExploreOutlinedIcon from \"@material-ui/icons/ExploreOutlined\";\nimport { INITUSERRSSLIST } from \"../../redux/actions\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport RSSFolder from \"./RSSFolder\";\nimport RssFeedIcon from \"@material-ui/icons/RssFeed\";\nimport TrendingUpOutlinedIcon from \"@material-ui/icons/TrendingUpOutlined\";\nimport addRSSFolderImg from \"../../imgs/add_RSS_folder.png\";\nconst useStyles = makeStyles({\n  root: {\n    color: \"#B5B5B5\",\n    flexGrow: 10,\n    maxWidth: 220,\n    marginBottom: \"10px\",\n    paddingLeft: \"25px\",\n    paddingRight: \"24px\",\n  },\n});\n\nconst CustomTooltip = withStyles((theme) => ({\n  tooltip: {\n    color: \"white\",\n    fontFamily: \"Open Sans\",\n    fontSize: 14,\n  },\n}))(Tooltip);\nexport default function RSSTab(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [addFolderInput, setAddFolderInput] = useState(\"\");\n  const [showPage, setShowPage] = useState(false);\n  const [RSSFolders, setRSSFolders] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const folderstyle = makeStyles({\n    root: {\n      paddingLeft: \"23px\",\n      paddingBottom: \"8px\",\n      maxWidth: 200,\n      fontSize: \"15px important\",\n      marginBottom: \"3px\",\n    },\n  });\n  const folderStyle = folderstyle();\n  function getUserRSSList(uid) {\n    db.collection(\"Member\")\n      .doc(uid)\n      .get()\n      .then((doc) => {\n        if (doc.data()) {\n          if (doc.data().subscribedRSS) {\n            dispatch(INITUSERRSSLIST(doc.data().subscribedRSS));\n          }\n        }\n      });\n  }\n  function addNewGroup(uid, name) {\n    db.collection(\"GroupBoard\")\n      .add({\n        name: name,\n        member: [uid],\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            board: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      });\n  }\n  const user = useSelector((state) => {\n    return state.memberReducer.user;\n  });\n  const userRSSList = useSelector((state) => {\n    return state.RSSReducer.UserRSSList;\n  });\n  useEffect(() => {}, [userRSSList]);\n  useEffect(() => {\n    function getRSSFolders() {\n      if (user) {\n        db.collection(\"Member\")\n          .doc(user.uid)\n          .onSnapshot((doc) => {\n            //console.log(\"sth changed, refetch\");\n            app\n              .getMemberRSSFolders(user.uid)\n              .then((RSSFolders) => {\n                // setRSSFolders(RSSFolders);\n                return RSSFolders;\n              })\n              .then(async (RSSFolders) => {\n                //console.log(\"=================105\");\n                for (const folder of RSSFolders) {\n                  //console.log(\"107\");\n                  if (folder.RSSIds) {\n                    //console.log(\"109\");\n                    for (const RSSId of folder.RSSIds) {\n                      //console.log(\"111\");\n                      //console.log(\"get info\");\n                      const RSS = await app.getRSSInfo(RSSId);\n                      //console.log(\"114\");\n                      //console.log(\"push to rss\");\n                      folder.RSS.push(RSS);\n                      //console.log(folder);\n                    }\n                  }\n                  //console.log(folder);\n                  // return folder;\n                }\n\n                for (const i in RSSFolders) {\n                  // setExpanded([...expanded, RSSFolders[i].id]);\n                }\n                //console.log(\"set rssfolders\");\n                setRSSFolders(RSSFolders);\n              });\n          });\n      }\n    }\n    if (user) {\n      getUserRSSList(user.uid);\n    }\n    getRSSFolders();\n  }, [user]);\n  function addRSSFolder(name, uid) {\n    db.collection(\"RSSFolders\")\n      .add({\n        name: name,\n        uid: uid,\n      })\n      .then((docRef) => {\n        docRef.update({ id: docRef.id });\n        return docRef.id;\n      })\n      .then((id) => {\n        db.collection(\"Member\")\n          .doc(uid)\n          .update({\n            RSSFolders: firebase.firestore.FieldValue.arrayUnion(id),\n          });\n      });\n  }\n  function showRSSFolders(folders) {\n    //console.log(\"show rss folders run\", folders);\n    const RSSFolderList = [];\n    if (folders.length > 0) {\n      for (const i in folders) {\n        //console.log(i);\n        //console.log(folders[i]);\n        //console.log(folders[i].RSS);\n        RSSFolderList.push(\n          <Droppable droppableId={folders[i].id}>\n            {(provided) => (\n              <TreeItem\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                key={folders[i].id}\n                nodeId={folders[i].id}\n                label={\n                  <div className={styles.labelWrapper}>\n                    <FolderOpenIcon\n                      style={{ fontSize: 20, color: \"rgba(225,225,225,0.3)\" }}\n                    />\n                    <div className={styles.labelTitle}>{folders[i].name}</div>\n                  </div>\n                }\n                onClick={() => {}}\n              >\n                <RSSFolder\n                  user={user}\n                  folderId={folders[i].id}\n                  folderRSS={folders[i].RSS}\n                />\n                {provided.placeholder}\n              </TreeItem>\n            )}\n          </Droppable>\n        );\n      }\n    }\n    return RSSFolderList;\n  }\n  //console.log(RSSFolders);\n  const articleFolderList = showRSSFolders(RSSFolders);\n  function onDragEnd(result) {\n    const { destination, source, draggableId } = result;\n    //console.log(result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      //console.log(\"nothing should happended\");\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      //console.log(\"move inside same folder\");\n      const newRSSFolders = [...RSSFolders];\n      let newRSSIds;\n      //console.log(newRSSFolders);\n      newRSSFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          const moveId = folder.RSSIds[source.index];\n          newRSSIds = [...folder.RSSIds];\n          //console.log(moveId);\n          //console.log(newRSSIds);\n          newRSSIds.splice(source.index, 1);\n          //console.log(newRSSIds);\n          newRSSIds.splice(destination.index, 0, moveId);\n          //console.log(newRSSIds);\n\n          const moveItem = folder.RSS[source.index];\n          //console.log(moveItem);\n          folder.RSS.splice(source.index, 1);\n          folder.RSS.splice(destination.index, 0, moveItem);\n          //console.log();\n          folder.RSSIds = newRSSIds;\n        }\n      });\n      //console.log(newRSSFolders);\n\n      db.collection(\"RSSFolders\").doc(destination.droppableId).update({\n        RSS: newRSSIds,\n      });\n      setRSSFolders(newRSSFolders);\n\n      //console.log(destination.index, source.index);\n      //console.log(source.droppableId);\n      //console.log(destination.droppableId);\n    }\n    if (destination.droppableId !== source.droppableId) {\n      //console.log(\"move to another folder\");\n      const newRSSFolders = [...RSSFolders];\n      //console.log(newRSSFolders);\n      let moveId;\n      let moveItem;\n      let newSourceRSSIds;\n      let newDestinationRSSIds;\n      newRSSFolders.forEach((folder) => {\n        if (folder.id === source.droppableId) {\n          //console.log(folder);\n          moveId = folder.RSSIds[source.index];\n          moveItem = folder.RSS[source.index];\n          newSourceRSSIds = [...folder.RSSIds];\n          newSourceRSSIds.splice(source.index, 1);\n          folder.RSS.splice(source.index, 1);\n          folder.RSSIds = newSourceRSSIds;\n          db.collection(\"RSSFolders\").doc(source.droppableId).update({\n            RSS: newSourceRSSIds,\n          });\n        }\n      });\n      newRSSFolders.forEach((folder) => {\n        if (folder.id === destination.droppableId) {\n          //console.log(folder);\n          newDestinationRSSIds = [...folder.RSSIds];\n          newDestinationRSSIds.splice(destination.index, 0, moveId);\n          folder.RSS.splice(destination.index, 0, moveItem);\n          folder.RSSIds = newDestinationRSSIds;\n          db.collection(\"RSSFolders\").doc(destination.droppableId).update({\n            RSS: newDestinationRSSIds,\n          });\n        }\n      });\n      setRSSFolders(newRSSFolders);\n    }\n  }\n  //console.log(props.focus);\n  //console.log(\"rerender\");\n  return (\n    <div className={styles.folderTabWrapper}>\n      <div className={styles.folderTab}>\n        <div className={styles.sectionTitle}>Taggy</div>\n        <Link to={\"/rssexplore\"}>\n          <div className={styles.importWrapper}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<AddOutlinedIcon />}\n            >\n              Add RSS\n            </Button>\n          </div>\n        </Link>\n\n        <Link to={\"/home\"}>\n          <div\n            className={\n              props.focus === \"home\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <TrendingUpOutlinedIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"home\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div className={styles.keyTitle}>Today</div>\n          </div>\n        </Link>\n        <Link to={\"/home/channels\"}>\n          <div\n            className={\n              props.focus === \"channels\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <ExploreOutlinedIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"channels\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div className={styles.keyTitle}>Explore</div>\n          </div>\n        </Link>\n        <Link to={\"/home/myfeeds\"}>\n          <div\n            className={\n              props.focus === \"myfeeds\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <RssFeedIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"myfeeds\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div\n              className={styles.keyTitle}\n              onClick={() => {\n                dispatch(SWITCHRSS(\"all\"));\n              }}\n            >\n              My Feeds\n            </div>\n          </div>\n        </Link>\n        <Link to={\"/home/searchfeeds\"}>\n          <div\n            className={\n              props.focus === \"searchfeeds\"\n                ? styles.keyTitleWrapper\n                : styles.titleWrapper\n            }\n          >\n            <SearchIcon\n              fontSize=\"small\"\n              className={\n                props.focus === \"searchfeeds\"\n                  ? styles.folderIcon_focus\n                  : styles.folderIcon\n              }\n            />\n            <div className={styles.keyTitle} onClick={() => {}}>\n              Search Feeds\n            </div>\n          </div>\n        </Link>\n        <div className={styles.subscriptionWrapper}>\n          <div className={styles.subscription}>Subscription</div>\n          <CustomTooltip title=\"Add new folder\" placement=\"right\" arrow>\n            <CreateNewFolderOutlinedIcon\n              onClick={() => {\n                setShowPage(true);\n              }}\n              className={styles.setting}\n              fontSize=\"small\"\n              style={{ color: \"#b2b2b2\" }}\n            />\n          </CustomTooltip>\n        </div>\n        <TreeView\n          className={classes.root}\n          defaultexpanded={expanded}\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n        >\n          <DragDropContext onDragEnd={onDragEnd}>\n            {articleFolderList}\n          </DragDropContext>\n        </TreeView>\n\n        {showPage\n          ? createPortal(\n              <div className={styles.popup}>\n                <div\n                  className={styles.blur}\n                  onClick={() => {\n                    setShowPage(false);\n                  }}\n                ></div>\n                <div className={styles.addFolder}>\n                  <div className={styles.addTitle}>Add new folder</div>\n                  <div className={styles.addSubTitle}>\n                    Create folder to organize RSS resources you love\n                  </div>\n                  <label className={styles.addFolderLabel} htmlFor=\"addForm\">\n                    Enter new folder name\n                  </label>\n                  <div className={styles.addFormWrapper}>\n                    <form id=\"addForm\" action=\"\">\n                      <input\n                        className={styles.addInput}\n                        type=\"text\"\n                        value={addFolderInput}\n                        onChange={(e) => {\n                          setAddFolderInput(e.target.value);\n                        }}\n                      />\n                      <button\n                        type=\"submit\"\n                        className={styles.saveBtn}\n                        form=\"addForm\"\n                        onClick={() => {\n                          if (user) {\n                            addRSSFolder(addFolderInput, user.uid);\n                            setShowPage(false);\n                          } else {\n                            alert(\"Please login to add folder!\");\n                          }\n                        }}\n                      >\n                        Create\n                      </button>\n                      <button\n                        onClick={() => {\n                          setShowPage(false);\n                        }}\n                        className={styles.cancelBtn}\n                      >\n                        Cancel\n                      </button>\n                    </form>\n                  </div>\n\n                  <div className={styles.imgWrapper}>\n                    <img src={addRSSFolderImg} alt=\"\" />\n                  </div>\n                </div>\n              </div>,\n              document.body\n            )\n          : \"\"}\n      </div>\n    </div>\n  );\n}\n","/Users/kevinzhang/Documents/Taggy/client/app/src/lib/gragh_lib.js",["312"],"/Users/kevinzhang/Documents/Taggy/client/app/src/index.js",["313"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./component/App.jsx\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport allReducers from \"./redux/reducers\";\nimport { Provider } from \"react-redux\";\nconst store = createStore(allReducers, composeWithDevTools());\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(//console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/kevinzhang/Documents/Taggy/client/app/src/redux/actions/index.js",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/Mobile_Burger.jsx",["314"],"import MobileRSSTab from \"../RSS/MobileRSSTab\";\n\nimport styles from \"./MobileFunctionTab.module.css\";\nimport boardStyles from \"../RSS/RSSBoard.module.css\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport MobileFolderTab from \"./MobileFolderTab\";\nimport { useState } from \"react\";\n\nexport default function MobileBurger(props) {\n  const [showBurger, setShowBurger] = useState(false);\n  let burgerCategory = \"\";\n  switch (props.position) {\n    case \"board\":\n      burgerCategory = <MobileFolderTab />;\n      break;\n    case \"RSS\":\n      burgerCategory = <MobileRSSTab />;\n      break;\n    default:\n  }\n  return (\n    <div className={styles.burgerWrapper}>\n      <MenuIcon\n        fontSize=\"large\"\n        style={{ color: \"white\" }}\n        onClick={() => {\n          setShowBurger(true);\n        }}\n      />\n      {showBurger ? (\n        <div className={boardStyles.popup}>\n          <div\n            className={boardStyles.blur}\n            onClick={() => {\n              setShowBurger(false);\n            }}\n          ></div>\n          {props.position === \"board\" ? <MobileFolderTab /> : <MobileRSSTab />}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n",["315","316"],"/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/article_Reducer.jsx",["317"],"/Users/kevinzhang/Documents/Taggy/client/app/src/component/SideTab/MobileFunctionTab.jsx",[],"/Users/kevinzhang/Documents/Taggy/client/app/src/redux/reducers/index.js",[],{"ruleId":"318","severity":1,"message":"319","line":79,"column":6,"nodeType":"320","endLine":79,"endColumn":27,"suggestions":"321"},{"ruleId":"318","severity":1,"message":"322","line":85,"column":29,"nodeType":"323","endLine":85,"endColumn":33},{"ruleId":"324","replacedBy":"325"},{"ruleId":"326","replacedBy":"327"},{"ruleId":"328","severity":1,"message":"329","line":35,"column":9,"nodeType":"330","messageId":"331","endLine":35,"endColumn":22},{"ruleId":"318","severity":1,"message":"332","line":175,"column":6,"nodeType":"320","endLine":175,"endColumn":23,"suggestions":"333"},{"ruleId":"328","severity":1,"message":"334","line":1,"column":38,"nodeType":"330","messageId":"331","endLine":1,"endColumn":44},{"ruleId":"328","severity":1,"message":"335","line":2,"column":10,"nodeType":"330","messageId":"331","endLine":2,"endColumn":21},{"ruleId":"328","severity":1,"message":"336","line":13,"column":10,"nodeType":"330","messageId":"331","endLine":13,"endColumn":21},{"ruleId":"328","severity":1,"message":"337","line":13,"column":23,"nodeType":"330","messageId":"331","endLine":13,"endColumn":37},{"ruleId":"328","severity":1,"message":"338","line":36,"column":12,"nodeType":"330","messageId":"331","endLine":36,"endColumn":30},{"ruleId":"318","severity":1,"message":"339","line":144,"column":6,"nodeType":"320","endLine":144,"endColumn":25,"suggestions":"340"},{"ruleId":"318","severity":1,"message":"341","line":157,"column":6,"nodeType":"320","endLine":157,"endColumn":19,"suggestions":"342"},{"ruleId":"318","severity":1,"message":"343","line":160,"column":6,"nodeType":"320","endLine":160,"endColumn":36,"suggestions":"344"},{"ruleId":"324","replacedBy":"345"},{"ruleId":"326","replacedBy":"346"},{"ruleId":"324","replacedBy":"347"},{"ruleId":"326","replacedBy":"348"},{"ruleId":"324","replacedBy":"349"},{"ruleId":"326","replacedBy":"350"},{"ruleId":"318","severity":1,"message":"351","line":112,"column":6,"nodeType":"320","endLine":112,"endColumn":21,"suggestions":"352"},{"ruleId":"318","severity":1,"message":"353","line":149,"column":6,"nodeType":"320","endLine":149,"endColumn":8,"suggestions":"354"},{"ruleId":"318","severity":1,"message":"355","line":366,"column":6,"nodeType":"320","endLine":366,"endColumn":21,"suggestions":"356"},{"ruleId":"318","severity":1,"message":"332","line":36,"column":6,"nodeType":"320","endLine":36,"endColumn":12,"suggestions":"357"},{"ruleId":"328","severity":1,"message":"358","line":17,"column":12,"nodeType":"330","messageId":"331","endLine":17,"endColumn":17},{"ruleId":"328","severity":1,"message":"359","line":48,"column":11,"nodeType":"330","messageId":"331","endLine":48,"endColumn":13},{"ruleId":"318","severity":1,"message":"360","line":202,"column":6,"nodeType":"320","endLine":202,"endColumn":25,"suggestions":"361"},{"ruleId":"318","severity":1,"message":"332","line":255,"column":6,"nodeType":"320","endLine":255,"endColumn":23,"suggestions":"362"},{"ruleId":"328","severity":1,"message":"363","line":3,"column":10,"nodeType":"330","messageId":"331","endLine":3,"endColumn":21},{"ruleId":"318","severity":1,"message":"364","line":52,"column":6,"nodeType":"320","endLine":52,"endColumn":38,"suggestions":"365"},{"ruleId":"328","severity":1,"message":"366","line":1,"column":17,"nodeType":"330","messageId":"331","endLine":1,"endColumn":26},{"ruleId":"328","severity":1,"message":"367","line":4,"column":10,"nodeType":"330","messageId":"331","endLine":4,"endColumn":12},{"ruleId":"328","severity":1,"message":"368","line":15,"column":9,"nodeType":"330","messageId":"331","endLine":15,"endColumn":17},{"ruleId":"328","severity":1,"message":"369","line":34,"column":9,"nodeType":"330","messageId":"331","endLine":34,"endColumn":21},{"ruleId":"318","severity":1,"message":"370","line":40,"column":6,"nodeType":"320","endLine":40,"endColumn":15,"suggestions":"371"},{"ruleId":"328","severity":1,"message":"366","line":2,"column":17,"nodeType":"330","messageId":"331","endLine":2,"endColumn":26},{"ruleId":"328","severity":1,"message":"367","line":5,"column":10,"nodeType":"330","messageId":"331","endLine":5,"endColumn":12},{"ruleId":"328","severity":1,"message":"368","line":16,"column":9,"nodeType":"330","messageId":"331","endLine":16,"endColumn":17},{"ruleId":"328","severity":1,"message":"372","line":18,"column":9,"nodeType":"330","messageId":"331","endLine":18,"endColumn":13},{"ruleId":"328","severity":1,"message":"369","line":36,"column":9,"nodeType":"330","messageId":"331","endLine":36,"endColumn":21},{"ruleId":"328","severity":1,"message":"373","line":14,"column":8,"nodeType":"330","messageId":"331","endLine":14,"endColumn":22},{"ruleId":"328","severity":1,"message":"374","line":15,"column":8,"nodeType":"330","messageId":"331","endLine":15,"endColumn":21},{"ruleId":"328","severity":1,"message":"375","line":17,"column":8,"nodeType":"330","messageId":"331","endLine":17,"endColumn":20},{"ruleId":"328","severity":1,"message":"376","line":18,"column":8,"nodeType":"330","messageId":"331","endLine":18,"endColumn":20},{"ruleId":"328","severity":1,"message":"377","line":28,"column":8,"nodeType":"330","messageId":"331","endLine":28,"endColumn":23},{"ruleId":"318","severity":1,"message":"332","line":177,"column":6,"nodeType":"320","endLine":177,"endColumn":23,"suggestions":"378"},{"ruleId":"328","severity":1,"message":"379","line":4,"column":5,"nodeType":"330","messageId":"331","endLine":4,"endColumn":8},{"ruleId":"328","severity":1,"message":"380","line":2,"column":10,"nodeType":"330","messageId":"331","endLine":2,"endColumn":16},{"ruleId":"328","severity":1,"message":"374","line":1,"column":8,"nodeType":"330","messageId":"331","endLine":1,"endColumn":21},{"ruleId":"328","severity":1,"message":"381","line":16,"column":8,"nodeType":"330","messageId":"331","endLine":16,"endColumn":15},{"ruleId":"328","severity":1,"message":"382","line":17,"column":8,"nodeType":"330","messageId":"331","endLine":17,"endColumn":27},{"ruleId":"328","severity":1,"message":"373","line":19,"column":8,"nodeType":"330","messageId":"331","endLine":19,"endColumn":22},{"ruleId":"328","severity":1,"message":"376","line":20,"column":8,"nodeType":"330","messageId":"331","endLine":20,"endColumn":20},{"ruleId":"328","severity":1,"message":"383","line":27,"column":8,"nodeType":"330","messageId":"331","endLine":27,"endColumn":19},{"ruleId":"328","severity":1,"message":"384","line":31,"column":8,"nodeType":"330","messageId":"331","endLine":31,"endColumn":17},{"ruleId":"328","severity":1,"message":"375","line":35,"column":8,"nodeType":"330","messageId":"331","endLine":35,"endColumn":20},{"ruleId":"328","severity":1,"message":"385","line":37,"column":8,"nodeType":"330","messageId":"331","endLine":37,"endColumn":30},{"ruleId":"328","severity":1,"message":"386","line":63,"column":20,"nodeType":"330","messageId":"331","endLine":63,"endColumn":31},{"ruleId":"328","severity":1,"message":"387","line":73,"column":9,"nodeType":"330","messageId":"331","endLine":73,"endColumn":20},{"ruleId":"328","severity":1,"message":"388","line":84,"column":12,"nodeType":"330","messageId":"331","endLine":84,"endColumn":23},{"ruleId":"328","severity":1,"message":"389","line":130,"column":28,"nodeType":"330","messageId":"331","endLine":130,"endColumn":29},{"ruleId":"318","severity":1,"message":"390","line":143,"column":6,"nodeType":"320","endLine":143,"endColumn":12,"suggestions":"391"},{"ruleId":"328","severity":1,"message":"392","line":202,"column":34,"nodeType":"330","messageId":"331","endLine":202,"endColumn":45},{"ruleId":"328","severity":1,"message":"393","line":54,"column":11,"nodeType":"330","messageId":"331","endLine":54,"endColumn":20},{"ruleId":"328","severity":1,"message":"394","line":45,"column":19,"nodeType":"330","messageId":"331","endLine":45,"endColumn":28},{"ruleId":"328","severity":1,"message":"395","line":46,"column":19,"nodeType":"330","messageId":"331","endLine":46,"endColumn":31},{"ruleId":"328","severity":1,"message":"394","line":86,"column":15,"nodeType":"330","messageId":"331","endLine":86,"endColumn":24},{"ruleId":"328","severity":1,"message":"395","line":87,"column":15,"nodeType":"330","messageId":"331","endLine":87,"endColumn":27},{"ruleId":"318","severity":1,"message":"396","line":22,"column":6,"nodeType":"320","endLine":22,"endColumn":8,"suggestions":"397"},{"ruleId":"328","severity":1,"message":"398","line":5,"column":8,"nodeType":"330","messageId":"331","endLine":5,"endColumn":16},{"ruleId":"328","severity":1,"message":"399","line":10,"column":8,"nodeType":"330","messageId":"331","endLine":10,"endColumn":18},{"ruleId":"328","severity":1,"message":"400","line":12,"column":8,"nodeType":"330","messageId":"331","endLine":12,"endColumn":15},{"ruleId":"328","severity":1,"message":"401","line":14,"column":10,"nodeType":"330","messageId":"331","endLine":14,"endColumn":16},{"ruleId":"328","severity":1,"message":"402","line":21,"column":10,"nodeType":"330","messageId":"331","endLine":21,"endColumn":25},{"ruleId":"328","severity":1,"message":"403","line":21,"column":27,"nodeType":"330","messageId":"331","endLine":21,"endColumn":45},{"ruleId":"328","severity":1,"message":"372","line":25,"column":9,"nodeType":"330","messageId":"331","endLine":25,"endColumn":13},{"ruleId":"318","severity":1,"message":"332","line":74,"column":6,"nodeType":"320","endLine":74,"endColumn":15,"suggestions":"404"},{"ruleId":"328","severity":1,"message":"402","line":81,"column":15,"nodeType":"330","messageId":"331","endLine":81,"endColumn":30},{"ruleId":"328","severity":1,"message":"405","line":2,"column":10,"nodeType":"330","messageId":"331","endLine":2,"endColumn":24},{"ruleId":"328","severity":1,"message":"394","line":56,"column":19,"nodeType":"330","messageId":"331","endLine":56,"endColumn":28},{"ruleId":"328","severity":1,"message":"395","line":57,"column":19,"nodeType":"330","messageId":"331","endLine":57,"endColumn":31},{"ruleId":"328","severity":1,"message":"394","line":85,"column":13,"nodeType":"330","messageId":"331","endLine":85,"endColumn":22},{"ruleId":"328","severity":1,"message":"395","line":86,"column":13,"nodeType":"330","messageId":"331","endLine":86,"endColumn":25},{"ruleId":"406","severity":1,"message":"407","line":111,"column":32,"nodeType":"408","endLine":111,"endColumn":56},{"ruleId":"328","severity":1,"message":"409","line":5,"column":8,"nodeType":"330","messageId":"331","endLine":5,"endColumn":22},{"ruleId":"328","severity":1,"message":"410","line":6,"column":8,"nodeType":"330","messageId":"331","endLine":6,"endColumn":23},{"ruleId":"328","severity":1,"message":"411","line":11,"column":8,"nodeType":"330","messageId":"331","endLine":11,"endColumn":16},{"ruleId":"328","severity":1,"message":"412","line":13,"column":8,"nodeType":"330","messageId":"331","endLine":13,"endColumn":19},{"ruleId":"328","severity":1,"message":"413","line":15,"column":8,"nodeType":"330","messageId":"331","endLine":15,"endColumn":17},{"ruleId":"328","severity":1,"message":"414","line":16,"column":22,"nodeType":"330","messageId":"331","endLine":16,"endColumn":32},{"ruleId":"328","severity":1,"message":"415","line":18,"column":25,"nodeType":"330","messageId":"331","endLine":18,"endColumn":43},{"ruleId":"328","severity":1,"message":"380","line":2,"column":10,"nodeType":"330","messageId":"331","endLine":2,"endColumn":16},{"ruleId":"324","replacedBy":"416"},{"ruleId":"326","replacedBy":"417"},{"ruleId":"318","severity":1,"message":"418","line":11,"column":6,"nodeType":"330","endLine":11,"endColumn":18},{"ruleId":"318","severity":1,"message":"419","line":11,"column":6,"nodeType":"330","endLine":11,"endColumn":18,"suggestions":"420"},{"ruleId":"328","severity":1,"message":"334","line":1,"column":17,"nodeType":"330","messageId":"331","endLine":1,"endColumn":23},{"ruleId":"328","severity":1,"message":"421","line":3,"column":10,"nodeType":"330","messageId":"331","endLine":3,"endColumn":14},{"ruleId":"328","severity":1,"message":"422","line":11,"column":12,"nodeType":"330","messageId":"331","endLine":11,"endColumn":21},{"ruleId":"318","severity":1,"message":"423","line":42,"column":6,"nodeType":"320","endLine":42,"endColumn":8,"suggestions":"424"},{"ruleId":"328","severity":1,"message":"386","line":53,"column":20,"nodeType":"330","messageId":"331","endLine":53,"endColumn":31},{"ruleId":"328","severity":1,"message":"387","line":63,"column":9,"nodeType":"330","messageId":"331","endLine":63,"endColumn":20},{"ruleId":"328","severity":1,"message":"388","line":76,"column":12,"nodeType":"330","messageId":"331","endLine":76,"endColumn":23},{"ruleId":"328","severity":1,"message":"389","line":134,"column":28,"nodeType":"330","messageId":"331","endLine":134,"endColumn":29},{"ruleId":"318","severity":1,"message":"390","line":147,"column":6,"nodeType":"320","endLine":147,"endColumn":12,"suggestions":"425"},{"ruleId":"328","severity":1,"message":"392","line":209,"column":34,"nodeType":"330","messageId":"331","endLine":209,"endColumn":45},{"ruleId":"328","severity":1,"message":"426","line":1,"column":10,"nodeType":"330","messageId":"331","endLine":1,"endColumn":17},{"ruleId":"328","severity":1,"message":"427","line":6,"column":23,"nodeType":"330","messageId":"331","endLine":6,"endColumn":38},{"ruleId":"328","severity":1,"message":"428","line":17,"column":7,"nodeType":"330","messageId":"331","endLine":17,"endColumn":21},{"ruleId":"324","replacedBy":"429"},{"ruleId":"326","replacedBy":"430"},{"ruleId":"328","severity":1,"message":"380","line":2,"column":10,"nodeType":"330","messageId":"331","endLine":2,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'articleList', 'dispatch', and 'lastQuery'. Either include them or remove the dependency array.","ArrayExpression",["431"],"Assignments to the 'articleSnapshotInit' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-native-reassign",["432"],"no-negated-in-lhs",["433"],"no-unused-vars","'CustomTooltip' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["434"],"'useRef' is defined but never used.","'useDispatch' is defined but never used.","'lastVisible' is assigned a value but never used.","'setLastVisible' is assigned a value but never used.","'batchFetchAllFeeds' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchUserFeeds'. Either include it or remove the dependency array.",["435"],"React Hook useEffect has a missing dependency: 'props.channelId'. Either include it or remove the dependency array.",["436"],"React Hook useEffect has a missing dependency: 'batchFetchAllFeeds'. Either include it or remove the dependency array.",["437"],["432"],["433"],["432"],["433"],["432"],["433"],"React Hook useEffect has missing dependencies: 'article.highLight' and 'initAricleHighLight'. Either include them or remove the dependency array.",["438"],"React Hook useEffect has missing dependencies: 'id' and 'note'. Either include them or remove the dependency array.",["439"],"React Hook useEffect has a missing dependency: 'handleMouseUp'. Either include it or remove the dependency array.",["440"],["441"],"'color' is defined but never used.","'id' is defined but never used.","React Hook useEffect has a missing dependency: 'initGraphData'. Either include it or remove the dependency array.",["442"],["443"],"'useSelector' is defined but never used.","React Hook useEffect has missing dependencies: 'BackEndRSSList', 'FrontEndRSSList', 'PMRSSList', 'TechRSSList', 'UIUXRSSList', and 'batchFetchAllFeeds'. Either include them or remove the dependency array.",["444"],"'useEffect' is defined but never used.","'db' is defined but never used.","'dispatch' is assigned a value but never used.","'ChannelRSSId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'item.id'. Either include it or remove the dependency array.",["445"],"'user' is assigned a value but never used.","'MarkunreadIcon' is defined but never used.","'AddCircleIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'BookmarkIcon' is defined but never used.","'DescriptionIcon' is defined but never used.",["446"],"'app' is assigned a value but never used.","'nanoid' is defined but never used.","'AddIcon' is defined but never used.","'CreateNewFolderIcon' is defined but never used.","'ExploreIcon' is defined but never used.","'TodayIcon' is defined but never used.","'LocalOfferOutlinedIcon' is defined but never used.","'setExpanded' is assigned a value but never used.","'folderStyle' is assigned a value but never used.","'addNewGroup' is defined but never used.","'i' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserRSSList'. Either include it or remove the dependency array.",["447"],"'draggableId' is assigned a value but never used.","'starttime' is assigned a value but never used.","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'location.pathname'. Either include them or remove the dependency array.",["448"],"'dispatch' is defined but never used.","'AddArticle' is defined but never used.","'teamImg' is defined but never used.","'render' is defined but never used.","'memberEmailList' is assigned a value but never used.","'setMemberEmailList' is assigned a value but never used.",["449"],"'ToastContainer' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'AccountBoxIcon' is defined but never used.","'InsertChartIcon' is defined but never used.","'HomeIcon' is defined but never used.","'RssFeedIcon' is defined but never used.","'InboxIcon' is defined but never used.","'makeStyles' is defined but never used.","'INITARTICLEFOLDERS' is defined but never used.",["432"],["433"],"React Hook React.useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook React.useEffect has a missing dependency: 'renderChartFn'. Either include it or remove the dependency array. If 'renderChartFn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["450"],"'Link' is defined but never used.","'deleteRSS' is defined but never used.","React Hook useEffect has a missing dependency: 'src'. Either include it or remove the dependency array.",["451"],["452"],"'resolve' is defined but never used.","'applyMiddleware' is defined but never used.","'burgerCategory' is assigned a value but never used.",["432"],["433"],{"desc":"453","fix":"454"},"no-global-assign","no-unsafe-negation",{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"455","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"455","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"479","fix":"489"},"Update the dependencies array to be: [articleList, dispatch, fetchRequired, lastQuery, user]",{"range":"490","text":"491"},"Update the dependencies array to be: [user, tabChange, dispatch]",{"range":"492","text":"493"},"Update the dependencies array to be: [user, queryPaging, fetchUserFeeds]",{"range":"494","text":"495"},"Update the dependencies array to be: [props.channelId, userRSSList]",{"range":"496","text":"497"},"Update the dependencies array to be: [props.channelId, lastVisible, batchFetchAllFeeds]",{"range":"498","text":"499"},"Update the dependencies array to be: [article.highLight, articleLoaded, initAricleHighLight]",{"range":"500","text":"501"},"Update the dependencies array to be: [id, note]",{"range":"502","text":"503"},"Update the dependencies array to be: [handleMouseUp, renderArticle]",{"range":"504","text":"505"},"Update the dependencies array to be: [dispatch, user]",{"range":"506","text":"507"},"Update the dependencies array to be: [user, articleList, initGraphData]",{"range":"508","text":"509"},{"range":"510","text":"493"},"Update the dependencies array to be: [selectCategory, feedFetchTimes, batchFetchAllFeeds, FrontEndRSSList, BackEndRSSList, PMRSSList, UIUXRSSList, TechRSSList]",{"range":"511","text":"512"},"Update the dependencies array to be: [item.id, newItem]",{"range":"513","text":"514"},{"range":"515","text":"493"},"Update the dependencies array to be: [getUserRSSList, user]",{"range":"516","text":"517"},"Update the dependencies array to be: [dispatch, history, location.pathname]",{"range":"518","text":"519"},"Update the dependencies array to be: [dispatch, groupId]",{"range":"520","text":"521"},"Update the dependencies array to be: [renderChartFn]",{"range":"522","text":"523"},"Update the dependencies array to be: [src]",{"range":"524","text":"525"},{"range":"526","text":"517"},[2499,2520],"[articleList, dispatch, fetchRequired, lastQuery, user]",[5962,5979],"[user, tabChange, dispatch]",[4107,4126],"[user, queryPaging, fetchUserFeeds]",[4604,4617],"[props.channelId, userRSSList]",[4699,4729],"[props.channelId, lastVisible, batchFetchAllFeeds]",[3693,3708],"[article.highLight, articleLoaded, initAricleHighLight]",[4663,4665],"[id, note]",[11479,11494],"[handleMouseUp, renderArticle]",[1143,1149],"[dispatch, user]",[5633,5652],"[user, articleList, initGraphData]",[8242,8259],[1796,1828],"[selectCategory, feedFetchTimes, batchFetchAllFeeds, FrontEndRSSList, BackEndRSSList, PMRSSList, UIUXRSSList, TechRSSList]",[1345,1354],"[item.id, newItem]",[6114,6131],[4801,4807],"[getUserRSSList, user]",[733,735],"[dispatch, history, location.pathname]",[2425,2434],"[dispatch, groupId]",[268,280],"[renderChartFn]",[1319,1321],"[src]",[4861,4867]]