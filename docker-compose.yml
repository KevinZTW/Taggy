version: '3.9'

x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

networks:
  default:
    name: taggy
    driver: bridge

services:
  # ******************
  # Core Services
  # ******************
  rssservice:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}-rssservice
    container_name: rss-service
    build:
      context: ./
      dockerfile: ./src/rssservice/Dockerfile
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-rssservice
    deploy:
      resources:
        limits:
          memory: 200M
    ports:
      - ${RSS_SERVICE_PORT}:${RSS_SERVICE_PORT}
    restart: unless-stopped
    environment:
      - RSS_SERVICE_PORT
      - RSS_SERVICE_MONGODB_PORT
      - RSS_SERVICE_MONGODB_ADDR
      - RSS_SERVICE_MONGODB_NAME
      - KAFKA_SERVICE_ADDR
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=rssservice
    depends_on:
      rss-mongodb:
        condition: service_started
      otelcol:
        condition: service_started
      kafka:
        condition: service_healthy

  recommendationservice:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}-recommendationservice
    container_name: recommendation-service
    build:
      context: ./
      dockerfile: ./src/recommendationservice/Dockerfile
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-recommendationservice
    deploy:
      resources:
        limits:
          memory: 200M
    ports:
      - ${RECOMMENDATION_SERVICE_PORT}:${RECOMMENDATION_SERVICE_PORT}
    restart: unless-stopped
    environment:
      - RECOMMENDATION_SERVICE_PORT
      - RECOMMENDATION_SERVICE_MONGODB_PORT
      - RECOMMENDATION_SERVICE_MONGODB_ADDR
      - RECOMMENDATION_SERVICE_MONGODB_NAME
      - KAFKA_SERVICE_ADDR
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=rssservice
    depends_on:
      rss-mongodb:
        condition: service_started
      otelcol:
        condition: service_started
      kafka:
        condition: service_healthy
  # Envoy
  envoy:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}-envoy
    container_name: envoy
    build:
      context: ./
      dockerfile: src/envoy/Dockerfile
    deploy:
      resources:
        limits:
          memory: 50M
    ports:
      - "${ENVOY_PORT}:${ENVOY_PORT}"
      - 10000:10000
    environment:
      - RSS_SERVICE_PORT
      - ZIPKIN_SERVICE_PORT
      - ZIPKIN_SERVICE_HOST
      - GRAFANA_SERVICE_PORT
      - GRAFANA_SERVICE_HOST
      - OTEL_COLLECTOR_HOST
      - OTEL_COLLECTOR_PORT
      - KAFKA_UI_SERVICE_PORT
      - KAFKA_UI_SERVICE_HOST
      - ENVOY_PORT
      - PROMETHEUS_SERVICE_PORT
    depends_on:
      - grafana
      - zipkin
      - prometheus
  # ******************
  # Dependent Services
  # ******************
  
  # postgres used by accountservice
  account-postgres:
    image: postgres:15
    container_name: postgres
    user: postgres
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    environment:
      - POSTGRES_USER=user
      - POSTGRES_DB=account-service
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ffs -U ffs"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: 
      - 5433:5432 # for local dev
    logging: *logging

  # mongodb used by rssservice and recommendationservice
  rss-mongodb:
    image: mongo:4.4
    restart: unless-stopped
    volumes:
      - ./volumes/rss-mongodb-data:/data/db
    ports:
      - 27018:27017 # for local dev
  kafka:
    image: ${IMAGE_NAME}:${IMAGE_VERSION}-kafka
    container_name: kafka
    build:
      context: ./
      dockerfile: ./src/kafka/Dockerfile
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-kafka
    deploy:
      resources:
        limits:
          memory: 500M
    restart: unless-stopped
    environment:
      # Add external for local dev
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      # - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=kafka
      - KAFKA_HEAP_OPTS=-Xmx200m -Xms200m
    healthcheck:
      test: nc -z kafka 9092
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
    # for local dev
    - 29092:29092
    - 9092:9092
    - 9093:9093
    logging: *logging
  kafka-ui:
     image: provectuslabs/kafka-ui:latest
     container_name: kafka-ui
     depends_on:
       kafka:
         condition: service_healthy
     environment:
       - DYNAMIC_CONFIG_ENABLED=true
       - KAFKA_CLUSTERS_0_NAME=local
       - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
     ports:
     - "8085:${KAFKA_UI_SERVICE_PORT}"
  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.76.1
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml"]
    volumes:
      - ./src/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
    ports:
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP over HTTP receiver
      - 9464:9464 # Prometheus exporter
      - 8888:8888 # Prometheus metrics exposed by the collector
      - 8889:8889 # Prometheus exporter metrics
    depends_on:
      - zipkin
    logging: *logging
  # Grafana
  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    volumes:
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_SERVICE_PORT}:${GRAFANA_SERVICE_PORT}"
    logging: *logging

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.43.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    volumes:
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    logging: *logging
  # Zipkin
  zipkin:
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "${ZIPKIN_SERVICE_PORT}:${ZIPKIN_SERVICE_PORT}"
    logging: *logging

